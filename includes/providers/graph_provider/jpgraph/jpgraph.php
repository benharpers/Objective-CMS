<?php
 require_once('jpg-config.inc.php'); require_once('jpgraph_errhandler.inc.php'); require_once('gd_image.inc.php'); require_once('jpgraph_ttf.inc.php'); require_once 'jpgraph_gradient.php'; DEFINE('JPG_VERSION','1.23p'); DEFINE('MIN_PHPVERSION','4.3.1'); if(USE_CACHE) { if (!defined('CACHE_DIR')) { if ( strstr( PHP_OS, 'WIN') ) { if( empty($_SERVER['TEMP']) ) { $t = new ErrMsgText(); $msg = $t->Get(11,$file,$lineno); die($msg); } else { DEFINE('CACHE_DIR', $_SERVER['TEMP'] . '/'); } } else { DEFINE('CACHE_DIR','/tmp/jpgraph_cache/'); } } } elseif( !defined('CACHE_DIR') ) { DEFINE('CACHE_DIR', ''); } if (!defined('TTF_DIR')) { if (strstr( PHP_OS, 'WIN') ) { $sroot = getenv('SystemRoot'); if( empty($sroot) ) { $t = new ErrMsgText(); $msg = $t->Get(12,$file,$lineno); die($msg); } else { DEFINE('TTF_DIR', $sroot.'/fonts/'); } } else { DEFINE('TTF_DIR','/usr/X11R6/lib/X11/fonts/truetype/'); } } DEFINE("TICKD_DENSE",1); DEFINE("TICKD_NORMAL",2); DEFINE("TICKD_SPARSE",3); DEFINE("TICKD_VERYSPARSE",4); DEFINE("SIDE_LEFT",-1); DEFINE("SIDE_RIGHT",1); DEFINE("SIDE_DOWN",-1); DEFINE("SIDE_BOTTOM",-1); DEFINE("SIDE_UP",1); DEFINE("SIDE_TOP",1); DEFINE("LEGEND_VERT",0); DEFINE("LEGEND_HOR",1); DEFINE("MARK_SQUARE",1); DEFINE("MARK_UTRIANGLE",2); DEFINE("MARK_DTRIANGLE",3); DEFINE("MARK_DIAMOND",4); DEFINE("MARK_CIRCLE",5); DEFINE("MARK_FILLEDCIRCLE",6); DEFINE("MARK_CROSS",7); DEFINE("MARK_STAR",8); DEFINE("MARK_X",9); DEFINE("MARK_LEFTTRIANGLE",10); DEFINE("MARK_RIGHTTRIANGLE",11); DEFINE("MARK_FLASH",12); DEFINE("MARK_IMG",13); DEFINE("MARK_FLAG1",14); DEFINE("MARK_FLAG2",15); DEFINE("MARK_FLAG3",16); DEFINE("MARK_FLAG4",17); DEFINE("MARK_IMG_PUSHPIN",50); DEFINE("MARK_IMG_SPUSHPIN",50); DEFINE("MARK_IMG_LPUSHPIN",51); DEFINE("MARK_IMG_DIAMOND",52); DEFINE("MARK_IMG_SQUARE",53); DEFINE("MARK_IMG_STAR",54); DEFINE("MARK_IMG_BALL",55); DEFINE("MARK_IMG_SBALL",55); DEFINE("MARK_IMG_MBALL",56); DEFINE("MARK_IMG_LBALL",57); DEFINE("MARK_IMG_BEVEL",58); DEFINE("INLINE_YES",1); DEFINE("INLINE_NO",0); DEFINE("BGIMG_FILLPLOT",1); DEFINE("BGIMG_FILLFRAME",2); DEFINE("BGIMG_COPY",3); DEFINE("BGIMG_CENTER",4); DEFINE("DEPTH_BACK",0); DEFINE("DEPTH_FRONT",1); DEFINE("VERTICAL",1); DEFINE("HORIZONTAL",0); DEFINE('AXSTYLE_SIMPLE',1); DEFINE('AXSTYLE_BOXIN',2); DEFINE('AXSTYLE_BOXOUT',3); DEFINE('AXSTYLE_YBOXIN',4); DEFINE('AXSTYLE_YBOXOUT',5); DEFINE('TITLEBKG_STYLE1',1); DEFINE('TITLEBKG_STYLE2',2); DEFINE('TITLEBKG_STYLE3',3); DEFINE('TITLEBKG_FRAME_NONE',0); DEFINE('TITLEBKG_FRAME_FULL',1); DEFINE('TITLEBKG_FRAME_BOTTOM',2); DEFINE('TITLEBKG_FRAME_BEVEL',3); DEFINE('TITLEBKG_FILLSTYLE_HSTRIPED',1); DEFINE('TITLEBKG_FILLSTYLE_VSTRIPED',2); DEFINE('TITLEBKG_FILLSTYLE_SOLID',3); DEFINE('BGRAD_FRAME',1); DEFINE('BGRAD_MARGIN',2); DEFINE('BGRAD_PLOT',3); DEFINE('TABTITLE_WIDTHFIT',0); DEFINE('TABTITLE_WIDTHFULL',-1); DEFINE('SKEW3D_UP',0); DEFINE('SKEW3D_DOWN',1); DEFINE('SKEW3D_LEFT',2); DEFINE('SKEW3D_RIGHT',3); DEFINE("_JPG_DEBUG",false); DEFINE("_FORCE_IMGTOFILE",false); DEFINE("_FORCE_IMGDIR",'/tmp/jpgimg/'); function CheckPHPVersion($aMinVersion) { list($majorC, $minorC, $editC) = split('[/.-]', PHP_VERSION); list($majorR, $minorR, $editR) = split('[/.-]', $aMinVersion); if ($majorC > $majorR) return true; if ($majorC < $majorR) return false; if ($minorC > $minorR) return true; if ($minorC < $minorR) return false; if ($editC >= $editR) return true; return true; } if( !CheckPHPVersion(MIN_PHPVERSION) ) { JpGraphError::RaiseL(13,PHP_VERSION,MIN_PHPVERSION); } function CheckGDVersion() { if( !function_exists("imagetypes") || !function_exists('imagecreatefromstring') ) return 0; $GDfuncList = get_extension_funcs('gd'); if( !$GDfuncList ) return 0 ; else { if( in_array('imagegd2',$GDfuncList) && in_array('imagecreatetruecolor',$GDfuncList)) return 2; else return 1; } } $gdversion = CheckGDVersion(); if( $gdversion != 2 ) { JpGraphError::RaiseL(25002); } function _phpErrorHandler($errno,$errmsg,$filename, $linenum, $vars) { if( $errno & error_reporting() ) { JpGraphError::RaiseL(25003,basename($filename),$linenum,$errmsg); } } if( INSTALL_PHP_ERR_HANDLER ) { set_error_handler("_phpErrorHandler"); } if( isset($GLOBALS['php_errormsg']) && CATCH_PHPERRMSG && !preg_match('|Deprecated|', $GLOBALS['php_errormsg'])) { JpGraphError::RaiseL(25004,$GLOBALS['php_errormsg']); } function sign($a) {return $a >= 0 ? 1 : -1;} function GenImgName() { global $_SERVER; $supported = imagetypes(); if( $supported & IMG_PNG ) $img_format="png"; elseif( $supported & IMG_GIF ) $img_format="gif"; elseif( $supported & IMG_JPG ) $img_format="jpeg"; if( !isset($_SERVER['PHP_SELF']) ) JpGraphError::RaiseL(25005); $fname = basename($_SERVER['PHP_SELF']); if( !empty($_SERVER['QUERY_STRING']) ) { $q = @$_SERVER['QUERY_STRING']; $fname .= '_'.preg_replace("/\W/", "_", $q).'.'.$img_format; } else { $fname = substr($fname,0,strlen($fname)-4).'.'.$img_format; } return $fname; } class JpgTimer { var $start; var $idx; function JpgTimer() { $this->idx=0; } function Push() { list($ms,$s)=explode(" ",microtime()); $this->start[$this->idx++]=floor($ms*1000) + 1000*$s; } function Pop() { assert($this->idx>0); list($ms,$s)=explode(" ",microtime()); $etime=floor($ms*1000) + (1000*$s); $this->idx--; return $etime-$this->start[$this->idx]; } } $gJpgBrandTiming = BRAND_TIMING; class DateLocale { var $iLocale = 'C'; var $iDayAbb = null; var $iShortDay = null; var $iShortMonth = null; var $iMonthName = null; function DateLocale() { settype($this->iDayAbb, 'array'); settype($this->iShortDay, 'array'); settype($this->iShortMonth, 'array'); settype($this->iMonthName, 'array'); $this->Set('C'); } function Set($aLocale) { if ( in_array($aLocale, array_keys($this->iDayAbb)) ){ $this->iLocale = $aLocale; return TRUE; } $pLocale = setlocale(LC_TIME, 0); if (is_array($aLocale)) { foreach ($aLocale as $loc) { $res = @setlocale(LC_TIME, $loc); if ( $res ) { $aLocale = $loc; break; } } } else { $res = @setlocale(LC_TIME, $aLocale); } if ( ! $res ){ JpGraphError::RaiseL(25007,$aLocale); return FALSE; } $this->iLocale = $aLocale; for ( $i = 0, $ofs = 0 - strftime('%w'); $i < 7; $i++, $ofs++ ){ $day = strftime('%a', strtotime("$ofs day")); $day{0} = strtoupper($day{0}); $this->iDayAbb[$aLocale][]= $day{0}; $this->iShortDay[$aLocale][]= $day; } for($i=1; $i<=12; ++$i) { list($short ,$full) = explode('|', strftime("%b|%B",strtotime("2001-$i-01"))); $this->iShortMonth[$aLocale][] = ucfirst($short); $this->iMonthName [$aLocale][] = ucfirst($full); } setlocale(LC_TIME, $pLocale); return TRUE; } function GetDayAbb() { return $this->iDayAbb[$this->iLocale]; } function GetShortDay() { return $this->iShortDay[$this->iLocale]; } function GetShortMonth() { return $this->iShortMonth[$this->iLocale]; } function GetShortMonthName($aNbr) { return $this->iShortMonth[$this->iLocale][$aNbr]; } function GetLongMonthName($aNbr) { return $this->iMonthName[$this->iLocale][$aNbr]; } function GetMonth() { return $this->iMonthName[$this->iLocale]; } } $gDateLocale = new DateLocale(); $gJpgDateLocale = new DateLocale(); class Footer { var $left,$center,$right; var $iLeftMargin = 3; var $iRightMargin = 3; var $iBottomMargin = 3; function Footer() { $this->left = new Text(); $this->left->ParagraphAlign('left'); $this->center = new Text(); $this->center->ParagraphAlign('center'); $this->right = new Text(); $this->right->ParagraphAlign('right'); } function Stroke(&$aImg) { $y = $aImg->height - $this->iBottomMargin; $x = $this->iLeftMargin; $this->left->Align('left','bottom'); $this->left->Stroke($aImg,$x,$y); $x = ($aImg->width - $this->iLeftMargin - $this->iRightMargin)/2; $this->center->Align('center','bottom'); $this->center->Stroke($aImg,$x,$y); $x = $aImg->width - $this->iRightMargin; $this->right->Align('right','bottom'); $this->right->Stroke($aImg,$x,$y); } } class Graph { var $cache=null; var $img=null; var $plots=array(); var $y2plots=array(); var $ynplots=array(); var $xscale=null; var $yscale=null,$y2scale=null, $ynscale=array(); var $iIcons = array(); var $cache_name; var $xgrid=null; var $ygrid=null,$y2grid=null; var $doframe=true,$frame_color=array(0,0,0), $frame_weight=1; var $boxed=false, $box_color=array(0,0,0), $box_weight=1; var $doshadow=false,$shadow_width=4,$shadow_color=array(102,102,102); var $xaxis=null; var $yaxis=null, $y2axis=null, $ynaxis=array(); var $margin_color=array(200,200,200); var $plotarea_color=array(255,255,255); var $title,$subtitle,$subsubtitle; var $axtype="linlin"; var $xtick_factor; var $texts=null, $y2texts=null; var $lines=null, $y2lines=null; var $bands=null, $y2bands=null; var $text_scale_off=0, $text_scale_abscenteroff=-1; var $background_image="",$background_image_type=-1,$background_image_format="png"; var $inline; var $showcsim=0,$csimcolor="red"; var $grid_depth=DEPTH_BACK; var $iAxisStyle = AXSTYLE_SIMPLE; var $iCSIMdisplay=false,$iHasStroked = false; var $footer; var $csimcachename = '', $csimcachetimeout = 0, $iCSIMImgAlt=''; var $iDoClipping = false; var $y2orderback=true; var $tabtitle; var $bkg_gradtype=-1,$bkg_gradstyle=BGRAD_MARGIN; var $bkg_gradfrom='navy', $bkg_gradto='silver'; var $titlebackground = false; var $titlebackground_color = 'lightblue', $titlebackground_style = 1, $titlebackground_framecolor = 'blue', $titlebackground_framestyle = 2, $titlebackground_frameweight = 1, $titlebackground_bevelheight = 3 ; var $titlebkg_fillstyle=TITLEBKG_FILLSTYLE_SOLID; var $titlebkg_scolor1='black',$titlebkg_scolor2='white'; var $framebevel = false, $framebeveldepth = 2 ; var $framebevelborder = false, $framebevelbordercolor='black'; var $framebevelcolor1='white@0.4', $framebevelcolor2='black@0.4'; var $background_image_mix=100; var $background_cflag = ''; var $background_cflag_type = BGIMG_FILLPLOT; var $background_cflag_mix = 100; var $iImgTrans=false, $iImgTransHorizon = 100,$iImgTransSkewDist=150, $iImgTransDirection = 1, $iImgTransMinSize = true, $iImgTransFillColor='white',$iImgTransHighQ=false, $iImgTransBorder=false,$iImgTransHorizonPos=0.5; var $iYAxisDeltaPos=50; var $iIconDepth=DEPTH_BACK; var $iAxisLblBgType = 0, $iXAxisLblBgFillColor = 'lightgray', $iXAxisLblBgColor = 'black', $iYAxisLblBgFillColor = 'lightgray', $iYAxisLblBgColor = 'black'; var $iTables=NULL; function Graph($aWidth=300,$aHeight=200,$aCachedName="",$aTimeOut=0,$aInline=true) { GLOBAL $gJpgBrandTiming; if( $gJpgBrandTiming ) { global $tim; $tim = new JpgTimer(); $tim->Push(); } if( !is_numeric($aWidth) || !is_numeric($aHeight) ) { JpGraphError::RaiseL(25008); } if( $aCachedName=="auto" ) $aCachedName=GenImgName(); $this->inline=$aInline; $this->img = new RotImage($aWidth,$aHeight); $this->cache = new ImgStreamCache($this->img); $this->cache->SetTimeOut($aTimeOut); $this->title = new Text(); $this->title->ParagraphAlign('center'); $this->title->SetFont(FF_FONT2,FS_BOLD); $this->title->SetMargin(3); $this->title->SetAlign('center'); $this->subtitle = new Text(); $this->subtitle->ParagraphAlign('center'); $this->subtitle->SetMargin(2); $this->subtitle->SetAlign('center'); $this->subsubtitle = new Text(); $this->subsubtitle->ParagraphAlign('center'); $this->subsubtitle->SetMargin(2); $this->subsubtitle->SetAlign('center'); $this->legend = new Legend(); $this->footer = new Footer(); $aCachedName = str_replace("?","_",$aCachedName); if( $aCachedName!="" && READ_CACHE && $aInline ) if( $this->cache->GetAndStream($aCachedName) ) { exit(); } $this->cache_name = $aCachedName; $this->SetTickDensity(); $this->tabtitle = new GraphTabTitle(); } function Set3DPerspective($aDir=1,$aHorizon=100,$aSkewDist=120,$aQuality=false,$aFillColor='#FFFFFF',$aBorder=false,$aMinSize=true,$aHorizonPos=0.5) { $this->iImgTrans = true; $this->iImgTransHorizon = $aHorizon; $this->iImgTransSkewDist= $aSkewDist; $this->iImgTransDirection = $aDir; $this->iImgTransMinSize = $aMinSize; $this->iImgTransFillColor=$aFillColor; $this->iImgTransHighQ=$aQuality; $this->iImgTransBorder=$aBorder; $this->iImgTransHorizonPos=$aHorizonPos; } function SetImgFormat($aFormat,$aQuality=75) { $this->img->SetImgFormat($aFormat,$aQuality); } function SetGridDepth($aDepth) { $this->grid_depth=$aDepth; } function SetIconDepth($aDepth) { $this->iIconDepth=$aDepth; } function SetAngle($aAngle) { $this->img->SetAngle($aAngle); } function SetAlphaBlending($aFlg=true) { $this->img->SetAlphaBlending($aFlg); } function SetMargin($lm,$rm,$tm,$bm) { $this->img->SetMargin($lm,$rm,$tm,$bm); } function SetY2OrderBack($aBack=true) { $this->y2orderback = $aBack; } function Set90AndMargin($lm=0,$rm=0,$tm=0,$bm=0) { $lm = $lm ==0 ? floor(0.2 * $this->img->width) : $lm ; $rm = $rm ==0 ? floor(0.1 * $this->img->width) : $rm ; $tm = $tm ==0 ? floor(0.2 * $this->img->height) : $tm ; $bm = $bm ==0 ? floor(0.1 * $this->img->height) : $bm ; $adj = ($this->img->height - $this->img->width)/2; $this->img->SetMargin($tm-$adj,$bm-$adj,$rm+$adj,$lm+$adj); $this->img->SetCenter(floor($this->img->width/2),floor($this->img->height/2)); $this->SetAngle(90); if( empty($this->yaxis) || empty($this->xaxis) ) { JpgraphError::RaiseL(25009); } $this->xaxis->SetLabelAlign('right','center'); $this->yaxis->SetLabelAlign('center','bottom'); } function SetClipping($aFlg=true) { $this->iDoClipping = $aFlg ; } function Add(&$aPlot) { if( $aPlot == null ) JpGraphError::RaiseL(25010); if( is_array($aPlot) && count($aPlot) > 0 ) $cl = $aPlot[0]; else $cl = $aPlot; if( is_a($cl,'Text') ) $this->AddText($aPlot); elseif( is_a($cl,'PlotLine') ) $this->AddLine($aPlot); elseif( is_a($cl,'PlotBand') ) $this->AddBand($aPlot); elseif( is_a($cl,'IconPlot') ) $this->AddIcon($aPlot); elseif( is_a($cl,'GTextTable') ) $this->AddTable($aPlot); else $this->plots[] = &$aPlot; } function AddTable(&$aTable) { if( is_array($aTable) ) { for($i=0; $i < count($aTable); ++$i ) $this->iTables[]=&$aTable[$i]; } else { $this->iTables[] = &$aTable ; } } function AddIcon(&$aIcon) { if( is_array($aIcon) ) { for($i=0; $i < count($aIcon); ++$i ) $this->iIcons[]=&$aIcon[$i]; } else { $this->iIcons[] = &$aIcon ; } } function AddY2(&$aPlot) { if( $aPlot == null ) JpGraphError::RaiseL(25011); if( is_array($aPlot) && count($aPlot) > 0 ) $cl = $aPlot[0]; else $cl = $aPlot; if( is_a($cl,'Text') ) $this->AddText($aPlot,true); elseif( is_a($cl,'PlotLine') ) $this->AddLine($aPlot,true); elseif( is_a($cl,'PlotBand') ) $this->AddBand($aPlot,true); else $this->y2plots[] = &$aPlot; } function AddY($aN,&$aPlot) { if( $aPlot == null ) JpGraphError::RaiseL(25012); if( is_array($aPlot) && count($aPlot) > 0 ) $cl = $aPlot[0]; else $cl = $aPlot; if( is_a($cl,'Text') || is_a($cl,'PlotLine') || is_a($cl,'PlotBand') ) JpGraph::RaiseL(25013); else $this->ynplots[$aN][] = &$aPlot; } function AddText(&$aTxt,$aToY2=false) { if( $aTxt == null ) JpGraphError::RaiseL(25014); if( $aToY2 ) { if( is_array($aTxt) ) { for($i=0; $i < count($aTxt); ++$i ) $this->y2texts[]=&$aTxt[$i]; } else $this->y2texts[] = &$aTxt; } else { if( is_array($aTxt) ) { for($i=0; $i < count($aTxt); ++$i ) $this->texts[]=&$aTxt[$i]; } else $this->texts[] = &$aTxt; } } function AddLine(&$aLine,$aToY2=false) { if( $aLine == null ) JpGraphError::RaiseL(25015); if( $aToY2 ) { if( is_array($aLine) ) { for($i=0; $i < count($aLine); ++$i ) $this->y2lines[]=&$aLine[$i]; } else $this->y2lines[] = &$aLine; } else { if( is_array($aLine) ) { for($i=0; $i < count($aLine); ++$i ) $this->lines[]=&$aLine[$i]; } else $this->lines[] = &$aLine; } } function AddBand(&$aBand,$aToY2=false) { if( $aBand == null ) JpGraphError::RaiseL(25016); if( $aToY2 ) { if( is_array($aBand) ) { for($i=0; $i < count($aBand); ++$i ) $this->y2bands[] = &$aBand[$i]; } else $this->y2bands[] = &$aBand; } else { if( is_array($aBand) ) { for($i=0; $i < count($aBand); ++$i ) $this->bands[] = &$aBand[$i]; } else $this->bands[] = &$aBand; } } function SetBackgroundGradient($aFrom='navy',$aTo='silver',$aGradType=2,$aStyle=BGRAD_FRAME) { $this->bkg_gradtype=$aGradType; $this->bkg_gradstyle=$aStyle; $this->bkg_gradfrom = $aFrom; $this->bkg_gradto = $aTo; } function SetBackgroundCFlag($aName,$aBgType=BGIMG_FILLPLOT,$aMix=100) { $this->background_cflag = $aName; $this->background_cflag_type = $aBgType; $this->background_cflag_mix = $aMix; } function SetBackgroundCountryFlag($aName,$aBgType=BGIMG_FILLPLOT,$aMix=100) { $this->background_cflag = $aName; $this->background_cflag_type = $aBgType; $this->background_cflag_mix = $aMix; } function SetBackgroundImage($aFileName,$aBgType=BGIMG_FILLPLOT,$aImgFormat="auto") { if( $aImgFormat == "auto" ) { $e = explode('.',$aFileName); if( !$e ) { JpGraphError::RaiseL(25018,$aFileName); } $valid_formats = array('png', 'jpg', 'gif'); $aImgFormat = strtolower($e[count($e)-1]); if ($aImgFormat == 'jpeg') { $aImgFormat = 'jpg'; } elseif (!in_array($aImgFormat, $valid_formats) ) { JpGraphError::RaiseL(25019,$aImgFormat); } } $this->background_image = $aFileName; $this->background_image_type=$aBgType; $this->background_image_format=$aImgFormat; } function SetBackgroundImageMix($aMix) { $this->background_image_mix = $aMix ; } function SetAxisStyle($aStyle) { $this->iAxisStyle = $aStyle ; } function SetBox($aDrawPlotFrame=true,$aPlotFrameColor=array(0,0,0),$aPlotFrameWeight=1) { $this->boxed = $aDrawPlotFrame; $this->box_weight = $aPlotFrameWeight; $this->box_color = $aPlotFrameColor; } function SetColor($aColor) { $this->plotarea_color=$aColor; } function SetMarginColor($aColor) { $this->margin_color=$aColor; } function SetFrame($aDrawImgFrame=true,$aImgFrameColor=array(0,0,0),$aImgFrameWeight=1) { $this->doframe = $aDrawImgFrame; $this->frame_color = $aImgFrameColor; $this->frame_weight = $aImgFrameWeight; } function SetFrameBevel($aDepth=3,$aBorder=false,$aBorderColor='black',$aColor1='white@0.4',$aColor2='darkgray@0.4',$aFlg=true) { $this->framebevel = $aFlg ; $this->framebeveldepth = $aDepth ; $this->framebevelborder = $aBorder ; $this->framebevelbordercolor = $aBorderColor ; $this->framebevelcolor1 = $aColor1 ; $this->framebevelcolor2 = $aColor2 ; $this->doshadow = false ; } function SetShadow($aShowShadow=true,$aShadowWidth=5,$aShadowColor=array(102,102,102)) { $this->doshadow = $aShowShadow; $this->shadow_color = $aShadowColor; $this->shadow_width = $aShadowWidth; $this->footer->iBottomMargin += $aShadowWidth; $this->footer->iRightMargin += $aShadowWidth; } function SetScale($aAxisType,$aYMin=1,$aYMax=1,$aXMin=1,$aXMax=1) { $this->axtype = $aAxisType; if( $aYMax < $aYMin || $aXMax < $aXMin ) JpGraphError::RaiseL(25020); $yt=substr($aAxisType,-3,3); if( $yt=="lin" ) $this->yscale = new LinearScale($aYMin,$aYMax); elseif( $yt == "int" ) { $this->yscale = new LinearScale($aYMin,$aYMax); $this->yscale->SetIntScale(); } elseif( $yt=="log" ) $this->yscale = new LogScale($aYMin,$aYMax); else JpGraphError::RaiseL(25021,$aAxisType); $xt=substr($aAxisType,0,3); if( $xt == "lin" || $xt == "tex" ) { $this->xscale = new LinearScale($aXMin,$aXMax,"x"); $this->xscale->textscale = ($xt == "tex"); } elseif( $xt == "int" ) { $this->xscale = new LinearScale($aXMin,$aXMax,"x"); $this->xscale->SetIntScale(); } elseif( $xt == "dat" ) { $this->xscale = new DateScale($aXMin,$aXMax,"x"); } elseif( $xt == "log" ) $this->xscale = new LogScale($aXMin,$aXMax,"x"); else JpGraphError::RaiseL(25022,$aAxisType); $this->xaxis = new Axis($this->img,$this->xscale); $this->yaxis = new Axis($this->img,$this->yscale); $this->xgrid = new Grid($this->xaxis); $this->ygrid = new Grid($this->yaxis); $this->ygrid->Show(); } function SetY2Scale($aAxisType="lin",$aY2Min=1,$aY2Max=1) { if( $aAxisType=="lin" ) $this->y2scale = new LinearScale($aY2Min,$aY2Max); elseif( $aAxisType == "int" ) { $this->y2scale = new LinearScale($aY2Min,$aY2Max); $this->y2scale->SetIntScale(); } elseif( $aAxisType=="log" ) { $this->y2scale = new LogScale($aY2Min,$aY2Max); } else JpGraphError::RaiseL(25023,$aAxisType); $this->y2axis = new Axis($this->img,$this->y2scale); $this->y2axis->scale->ticks->SetDirection(SIDE_LEFT); $this->y2axis->SetLabelSide(SIDE_RIGHT); $this->y2axis->SetPos('max'); $this->y2axis->SetTitleSide(SIDE_RIGHT); $this->y2grid = new Grid($this->y2axis); } function SetYDeltaDist($aDist) { $this->iYAxisDeltaPos = $aDist; } function SetYScale($aN,$aAxisType="lin",$aYMin=1,$aYMax=1) { if( $aAxisType=="lin" ) $this->ynscale[$aN] = new LinearScale($aYMin,$aYMax); elseif( $aAxisType == "int" ) { $this->ynscale[$aN] = new LinearScale($aYMin,$aYMax); $this->ynscale[$aN]->SetIntScale(); } elseif( $aAxisType=="log" ) { $this->ynscale[$aN] = new LogScale($aYMin,$aYMax); } else JpGraphError::RaiseL(25024,$aAxisType); $this->ynaxis[$aN] = new Axis($this->img,$this->ynscale[$aN]); $this->ynaxis[$aN]->scale->ticks->SetDirection(SIDE_LEFT); $this->ynaxis[$aN]->SetLabelSide(SIDE_RIGHT); } function SetTickDensity($aYDensity=TICKD_NORMAL,$aXDensity=TICKD_NORMAL) { $this->xtick_factor=30; $this->ytick_factor=25; switch( $aYDensity ) { case TICKD_DENSE: $this->ytick_factor=12; break; case TICKD_NORMAL: $this->ytick_factor=25; break; case TICKD_SPARSE: $this->ytick_factor=40; break; case TICKD_VERYSPARSE: $this->ytick_factor=100; break; default: JpGraphError::RaiseL(25025,$densy); } switch( $aXDensity ) { case TICKD_DENSE: $this->xtick_factor=15; break; case TICKD_NORMAL: $this->xtick_factor=30; break; case TICKD_SPARSE: $this->xtick_factor=45; break; case TICKD_VERYSPARSE: $this->xtick_factor=60; break; default: JpGraphError::RaiseL(25025,$densx); } } function GetCSIMareas() { if( !$this->iHasStroked ) $this->Stroke(_CSIM_SPECIALFILE); $csim = $this->title->GetCSIMAreas(); $csim .= $this->subtitle->GetCSIMAreas(); $csim .= $this->subsubtitle->GetCSIMAreas(); $csim .= $this->legend->GetCSIMAreas(); if( $this->y2axis != NULL ) { $csim .= $this->y2axis->title->GetCSIMAreas(); } if( $this->texts != null ) { $n = count($this->texts); for($i=0; $i < $n; ++$i ) { $csim .= $this->texts[$i]->GetCSIMAreas(); } } if( $this->y2texts != null && $this->y2scale != null ) { $n = count($this->y2texts); for($i=0; $i < $n; ++$i ) { $csim .= $this->y2texts[$i]->GetCSIMAreas(); } } if( $this->yaxis != null && $this->xaxis != null ) { $csim .= $this->yaxis->title->GetCSIMAreas(); $csim .= $this->xaxis->title->GetCSIMAreas(); } $n = count($this->plots); for( $i=0; $i < $n; ++$i ) $csim .= $this->plots[$i]->GetCSIMareas(); $n = count($this->y2plots); for( $i=0; $i < $n; ++$i ) $csim .= $this->y2plots[$i]->GetCSIMareas(); $n = count($this->ynaxis); for( $i=0; $i < $n; ++$i ) { $m = count($this->ynplots[$i]); for($j=0; $j < $m; ++$j ) { $csim .= $this->ynplots[$i][$j]->GetCSIMareas(); } } $n = count($this->iTables); for( $i=0; $i < $n; ++$i ) { $csim .= $this->iTables[$i]->GetCSIMareas(); } return $csim; } function GetHTMLImageMap($aMapName) { $im = "<map name=\"$aMapName\" id=\"$aMapName\" >\n"; $im .= $this->GetCSIMareas(); $im .= "</map>"; return $im; } function CheckCSIMCache($aCacheName,$aTimeOut=60) { global $_SERVER; if( $aCacheName=='auto' ) $aCacheName=basename($_SERVER['PHP_SELF']); $urlarg = $this->GetURLArguments(); $this->csimcachename = CSIMCACHE_DIR.$aCacheName.$urlarg; $this->csimcachetimeout = $aTimeOut; if( $this->csimcachename != '' ) { $dir = dirname($this->csimcachename); $base = basename($this->csimcachename); $base = strtok($base,'.'); $suffix = strtok('.'); $basecsim = $dir.'/'.$base.'?'.$urlarg.'_csim_.html'; $baseimg = $dir.'/'.$base.'?'.$urlarg.'.'.$this->img->img_format; $timedout=false; if( file_exists($basecsim) && file_exists($baseimg) ) { $diff=time()-filemtime($basecsim); if( $this->csimcachetimeout>0 && ($diff > $this->csimcachetimeout*60) ) { $timedout=true; @unlink($basecsim); @unlink($baseimg); } else { if ($fh = @fopen($basecsim, "r")) { fpassthru($fh); return true; } else JpGraphError::RaiseL(25027,$basecsim); } } } return false; } function GetURLArguments() { $urlarg = _CSIM_DISPLAY.'=1'; reset($_GET); while( list($key,$value) = each($_GET) ) { if( is_array($value) ) { $n = count($value); for( $i=0; $i < $n; ++$i ) { $urlarg .= '&amp;'.$key.'%5B%5D='.urlencode($value[$i]); } } else { $urlarg .= '&amp;'.$key.'='.urlencode($value); } } reset($_POST); while( list($key,$value) = each($_POST) ) { if( is_array($value) ) { $n = count($value); for( $i=0; $i < $n; ++$i ) { $urlarg .= '&amp;'.$key.'%5B%5D='.urlencode($value[$i]); } } else { $urlarg .= '&amp;'.$key.'='.urlencode($value); } } return $urlarg; } function SetCSIMImgAlt($aAlt) { $this->iCSIMImgAlt = $aAlt; } function StrokeCSIM($aScriptName='auto',$aCSIMName='',$aBorder=0) { if( $aCSIMName=='' ) { srand ((double) microtime() * 1000000); $r = rand(0,100000); $aCSIMName='__mapname'.$r.'__'; } if( $aScriptName=='auto' ) $aScriptName=basename($_SERVER['PHP_SELF']); $urlarg = $this->GetURLArguments(); if( empty($_GET[_CSIM_DISPLAY]) ) { if( $this->csimcachename != '' ) { $dir = dirname($this->csimcachename); $base = basename($this->csimcachename); $base = strtok($base,'.'); $suffix = strtok('.'); $basecsim = $dir.'/'.$base.'?'.$urlarg.'_csim_.html'; $baseimg = $base.'?'.$urlarg.'.'.$this->img->img_format; if( file_exists($dir) && !is_writeable($dir) ) { JpgraphError::RaiseL(25028,$dir); } $this->cache->MakeDirs($dir); $this->Stroke(CSIMCACHE_DIR.$baseimg); $tmp = str_replace('?','%3f',$baseimg); $htmlwrap = $this->GetHTMLImageMap($aCSIMName)."\n". '<img src="'.CSIMCACHE_HTTP_DIR.$tmp.'" ismap="ismap" usemap="#'.$aCSIMName.'" border="'.$aBorder.'" width="'.$this->img->width.'" height="'.$this->img->height."\" alt=\"".$this->iCSIMImgAlt."\" />\n"; if($fh = @fopen($basecsim,'w') ) { fwrite($fh,$htmlwrap); fclose($fh); echo $htmlwrap; } else JpGraphError::RaiseL(25029,$basecsim); } else { if( $aScriptName=='' ) { JpGraphError::RaiseL(25030); } echo $this->GetHTMLImageMap($aCSIMName); echo "<img src=\"".$aScriptName.'?'.$urlarg."\" ismap=\"ismap\" usemap=\"#".$aCSIMName.'" border="'.$aBorder.'" width="'.$this->img->width.'" height="'.$this->img->height."\" alt=\"".$this->iCSIMImgAlt."\" />\n"; } } else { $this->Stroke(); } } function GetTextsYMinMax($aY2=false) { if( $aY2 ) $txts = $this->y2texts; else $txts = $this->texts; $n = count($txts); $min=null; $max=null; for( $i=0; $i < $n; ++$i ) { if( $txts[$i]->iScalePosY !== null && $txts[$i]->iScalePosX !== null ) { if( $min === null ) { $min = $max = $txts[$i]->iScalePosY ; } else { $min = min($min,$txts[$i]->iScalePosY); $max = max($max,$txts[$i]->iScalePosY); } } } if( $min !== null ) { return array($min,$max); } else return null; } function GetTextsXMinMax($aY2=false) { if( $aY2 ) $txts = $this->y2texts; else $txts = $this->texts; $n = count($txts); $min=null; $max=null; for( $i=0; $i < $n; ++$i ) { if( $txts[$i]->iScalePosY !== null && $txts[$i]->iScalePosX !== null ) { if( $min === null ) { $min = $max = $txts[$i]->iScalePosX ; } else { $min = min($min,$txts[$i]->iScalePosX); $max = max($max,$txts[$i]->iScalePosX); } } } if( $min !== null ) { return array($min,$max); } else return null; } function GetXMinMax() { list($min,$ymin) = $this->plots[0]->Min(); list($max,$ymax) = $this->plots[0]->Max(); foreach( $this->plots as $p ) { list($xmin,$ymin) = $p->Min(); list($xmax,$ymax) = $p->Max(); $min = Min($xmin,$min); $max = Max($xmax,$max); } if( $this->y2axis != null ) { foreach( $this->y2plots as $p ) { list($xmin,$ymin) = $p->Min(); list($xmax,$ymax) = $p->Max(); $min = Min($xmin,$min); $max = Max($xmax,$max); } } $n = count($this->ynaxis); for( $i=0; $i < $n; ++$i ) { if( $this->ynaxis[$i] != null) { foreach( $this->ynplots[$i] as $p ) { list($xmin,$ymin) = $p->Min(); list($xmax,$ymax) = $p->Max(); $min = Min($xmin,$min); $max = Max($xmax,$max); } } } return array($min,$max); } function AdjustMarginsForTitles() { $totrequired = ($this->title->t != '' ? $this->title->GetTextHeight($this->img) + $this->title->margin + 5 : 0 ) + ($this->subtitle->t != '' ? $this->subtitle->GetTextHeight($this->img) + $this->subtitle->margin + 5 : 0 ) + ($this->subsubtitle->t != '' ? $this->subsubtitle->GetTextHeight($this->img) + $this->subsubtitle->margin + 5 : 0 ) ; $btotrequired = 0; if($this->xaxis != null && !$this->xaxis->hide && !$this->xaxis->hide_labels ) { if( $this->xaxis->title->t != '' ) { if( $this->img->a == 90 ) $btotrequired = $this->yaxis->title->GetTextHeight($this->img) + 5 ; else $btotrequired = $this->xaxis->title->GetTextHeight($this->img) + 5 ; } else $btotrequired = 0; if( $this->img->a == 90 ) { $this->img->SetFont($this->yaxis->font_family,$this->yaxis->font_style, $this->yaxis->font_size); $lh = $this->img->GetTextHeight('Mg',$this->yaxis->label_angle); } else { $this->img->SetFont($this->xaxis->font_family,$this->xaxis->font_style, $this->xaxis->font_size); $lh = $this->img->GetTextHeight('Mg',$this->xaxis->label_angle); } $btotrequired += $lh + 5; } if( $this->img->a == 90 ) { } else{ if( $this->img->top_margin < $totrequired ) { $this->SetMargin($this->img->left_margin,$this->img->right_margin, $totrequired,$this->img->bottom_margin); } if( $this->img->bottom_margin < $btotrequired ) { $this->SetMargin($this->img->left_margin,$this->img->right_margin, $this->img->top_margin,$btotrequired); } } } function Stroke($aStrokeFileName="") { if( empty($this->yscale) ) { JpGraphError::RaiseL(25031); } $this->AdjustMarginsForTitles(); if( $this->yscale ) $this->yscale->InitConstants($this->img); if( $this->xscale ) $this->xscale->InitConstants($this->img); if( $this->y2scale ) $this->y2scale->InitConstants($this->img); $n=count($this->ynscale); for($i=0; $i < $n; ++$i) { if( $this->ynscale[$i] ) $this->ynscale[$i]->InitConstants($this->img); } $_csim = ($aStrokeFileName===_CSIM_SPECIALFILE); $this->iHasStroked = true; for($i=0; $i < count($this->plots) ; ++$i ) { $this->plots[$i]->PreStrokeAdjust($this); $this->plots[$i]->DoLegend($this); } if( $this->y2scale != null ) { for($i=0; $i<count($this->y2plots) ; ++$i ) { $this->y2plots[$i]->PreStrokeAdjust($this); $this->y2plots[$i]->DoLegend($this); } } $n = count($this->ynaxis); for($i=0; $i<$n ; ++$i ) { if( $this->ynplots == null || $this->ynplots[$i] == null) { JpGraphError::RaiseL(25032,$i); } $m = count($this->ynplots[$i]); for($j=0; $j < $m; ++$j ) { $this->ynplots[$i][$j]->PreStrokeAdjust($this); $this->ynplots[$i][$j]->DoLegend($this); } } if( (!$this->yscale->IsSpecified() && count($this->plots)==0) || ($this->y2scale!=null && !$this->y2scale->IsSpecified() && count($this->y2plots)==0) ) { JpGraphError::RaiseL(25026); } if( (!$this->xscale->IsSpecified() && count($this->plots)==0 && count($this->y2plots)==0) ) JpGraphError::RaiseL(25034); if( !$this->yscale->IsSpecified() && count($this->plots)>0 ) { list($min,$max) = $this->GetPlotsYMinMax($this->plots); $lres = $this->GetLinesYMinMax($this->lines); if( is_array($lres) ) { list($linmin,$linmax) = $lres ; $min = min($min,$linmin); $max = max($max,$linmax); } $tres = $this->GetTextsYMinMax(); if( is_array($tres) ) { list($tmin,$tmax) = $tres ; $min = min($min,$tmin); $max = max($max,$tmax); } $this->yscale->AutoScale($this->img,$min,$max, $this->img->plotheight/$this->ytick_factor); } elseif( $this->yscale->IsSpecified() && ( $this->yscale->auto_ticks || !$this->yscale->ticks->IsSpecified()) ) { $min = $this->yscale->scale[0]; $max = $this->yscale->scale[1]; $this->yscale->AutoScale($this->img,$min,$max, $this->img->plotheight/$this->ytick_factor, $this->yscale->auto_ticks); } if( $this->y2scale != null) { if( !$this->y2scale->IsSpecified() && count($this->y2plots)>0 ) { list($min,$max) = $this->GetPlotsYMinMax($this->y2plots); $lres = $this->GetLinesYMinMax($this->y2lines); if( is_array($lres) ) { list($linmin,$linmax) = $lres ; $min = min($min,$linmin); $max = max($max,$linmax); } $tres = $this->GetTextsYMinMax(true); if( is_array($tres) ) { list($tmin,$tmax) = $tres ; $min = min($min,$tmin); $max = max($max,$tmax); } $this->y2scale->AutoScale($this->img,$min,$max,$this->img->plotheight/$this->ytick_factor); } elseif( $this->y2scale->IsSpecified() && ( $this->y2scale->auto_ticks || !$this->y2scale->ticks->IsSpecified()) ) { $min = $this->y2scale->scale[0]; $max = $this->y2scale->scale[1]; $this->y2scale->AutoScale($this->img,$min,$max, $this->img->plotheight/$this->ytick_factor, $this->y2scale->auto_ticks); } } $n = count($this->ynaxis); for( $i=0; $i < $n; ++$i ) { if( $this->ynscale[$i] != null) { if( !$this->ynscale[$i]->IsSpecified() && count($this->ynplots[$i])>0 ) { list($min,$max) = $this->GetPlotsYMinMax($this->ynplots[$i]); $this->ynscale[$i]->AutoScale($this->img,$min,$max,$this->img->plotheight/$this->ytick_factor); } elseif( $this->ynscale[$i]->IsSpecified() && ( $this->ynscale[$i]->auto_ticks || !$this->ynscale[$i]->ticks->IsSpecified()) ) { $min = $this->ynscale[$i]->scale[0]; $max = $this->ynscale[$i]->scale[1]; $this->ynscale[$i]->AutoScale($this->img,$min,$max, $this->img->plotheight/$this->ytick_factor, $this->ynscale[$i]->auto_ticks); } } } if( !$this->xscale->IsSpecified() ) { if( substr($this->axtype,0,4) == "text" ) { $max=0; $n = count($this->plots); for($i=0; $i < $n; ++$i ) { $p = $this->plots[$i]; if( is_a($p,'BarPlot') || empty($p->barcenter)) { $max=max($max,$p->numpoints-1); } else { $max=max($max,$p->numpoints); } } $min=0; if( $this->y2axis != null ) { foreach( $this->y2plots as $p ) { $max=max($max,$p->numpoints-1); } } $n = count($this->ynaxis); for( $i=0; $i < $n; ++$i ) { if( $this->ynaxis[$i] != null) { foreach( $this->ynplots[$i] as $p ) { $max=max($max,$p->numpoints-1); } } } $this->xscale->Update($this->img,$min,$max); $this->xscale->ticks->Set($this->xaxis->tick_step,1); $this->xscale->ticks->SupressMinorTickMarks(); } else { list($min,$max) = $this->GetXMinMax(); $lres = $this->GetLinesXMinMax($this->lines); if( $lres ) { list($linmin,$linmax) = $lres ; $min = min($min,$linmin); $max = max($max,$linmax); } $lres = $this->GetLinesXMinMax($this->y2lines); if( $lres ) { list($linmin,$linmax) = $lres ; $min = min($min,$linmin); $max = max($max,$linmax); } $tres = $this->GetTextsXMinMax(); if( $tres ) { list($tmin,$tmax) = $tres ; $min = min($min,$tmin); $max = max($max,$tmax); } $tres = $this->GetTextsXMinMax(true); if( $tres ) { list($tmin,$tmax) = $tres ; $min = min($min,$tmin); $max = max($max,$tmax); } $this->xscale->AutoScale($this->img,$min,$max,round($this->img->plotwidth/$this->xtick_factor)); } if( !is_numeric($this->yaxis->pos) && !is_string($this->yaxis->pos) ) $this->yaxis->SetPos($this->xscale->GetMinVal()); if( $this->y2axis != null ) { if( !is_numeric($this->y2axis->pos) && !is_string($this->y2axis->pos) ) $this->y2axis->SetPos($this->xscale->GetMaxVal()); $this->y2axis->SetTitleSide(SIDE_RIGHT); } $n = count($this->ynaxis); $nY2adj = $this->y2axis != null ? $this->iYAxisDeltaPos : 0; for( $i=0; $i < $n; ++$i ) { if( $this->ynaxis[$i] != null ) { if( !is_numeric($this->ynaxis[$i]->pos) && !is_string($this->ynaxis[$i]->pos) ) { $this->ynaxis[$i]->SetPos($this->xscale->GetMaxVal()); $this->ynaxis[$i]->SetPosAbsDelta($i*$this->iYAxisDeltaPos + $nY2adj); } $this->ynaxis[$i]->SetTitleSide(SIDE_RIGHT); } } } elseif( $this->xscale->IsSpecified() && ( $this->xscale->auto_ticks || !$this->xscale->ticks->IsSpecified()) ) { $min = $this->xscale->scale[0]; $max = $this->xscale->scale[1]; $this->xscale->AutoScale($this->img,$min,$max, $this->img->plotwidth/$this->xtick_factor, false); if( $this->y2axis != null ) { if( !is_numeric($this->y2axis->pos) && !is_string($this->y2axis->pos) ) $this->y2axis->SetPos($this->xscale->GetMaxVal()); $this->y2axis->SetTitleSide(SIDE_RIGHT); } } if( ($this->yaxis->pos==$this->xscale->GetMinVal() || (is_string($this->yaxis->pos) && $this->yaxis->pos=='min')) && !is_numeric($this->xaxis->pos) && $this->yscale->GetMinVal() < 0 && substr($this->axtype,0,4) != 'text' && $this->xaxis->pos!="min" ) { $this->xscale->ticks->SupressFirst(); if( $this->y2axis != null ) { $this->xscale->ticks->SupressLast(); } } elseif( !is_numeric($this->yaxis->pos) && $this->yaxis->pos=='max' ) { $this->xscale->ticks->SupressLast(); } if( !$_csim ) { $this->StrokePlotArea(); if( $this->iIconDepth == DEPTH_BACK ) { $this->StrokeIcons(); } } $this->StrokeAxis(false); if( $this->bands != null && !$_csim) for($i=0; $i < count($this->bands); ++$i) { if( $this->bands[$i]->depth == DEPTH_BACK ) $this->bands[$i]->Stroke($this->img,$this->xscale,$this->yscale); } if( $this->y2bands != null && $this->y2scale != null && !$_csim ) for($i=0; $i < count($this->y2bands); ++$i) { if( $this->y2bands[$i]->depth == DEPTH_BACK ) $this->y2bands[$i]->Stroke($this->img,$this->xscale,$this->y2scale); } if( $this->grid_depth == DEPTH_BACK && !$_csim) { $this->ygrid->Stroke(); $this->xgrid->Stroke(); } if( $this->y2axis != null && !$_csim) { $this->y2axis->Stroke($this->xscale); $this->y2grid->Stroke(); } $n = count($this->ynaxis); for( $i=0; $i < $n; ++$i ) { $this->ynaxis[$i]->Stroke($this->xscale); } $oldoff=$this->xscale->off; if(substr($this->axtype,0,4)=="text") { if( $this->text_scale_abscenteroff > -1 ) { $this->xscale->off += round($this->xscale->scale_factor/2)-round($this->text_scale_abscenteroff/2); } else { $this->xscale->off += ceil($this->xscale->scale_factor*$this->text_scale_off*$this->xscale->ticks->minor_step); } } if( $this->iDoClipping ) { $oldimage = $this->img->CloneCanvasH(); } if( ! $this->y2orderback ) { for($i=0; $i < count($this->plots); ++$i) { $this->plots[$i]->Stroke($this->img,$this->xscale,$this->yscale); $this->plots[$i]->StrokeMargin($this->img); } } if( $this->y2scale != null ) for($i=0; $i< count($this->y2plots); ++$i ) { $this->y2plots[$i]->Stroke($this->img,$this->xscale,$this->y2scale); } if( $this->y2orderback ) { for($i=0; $i < count($this->plots); ++$i) { $this->plots[$i]->Stroke($this->img,$this->xscale,$this->yscale); $this->plots[$i]->StrokeMargin($this->img); } } $n = count($this->ynaxis); for( $i=0; $i < $n; ++$i ) { $m = count($this->ynplots[$i]); for( $j=0; $j < $m; ++$j ) { $this->ynplots[$i][$j]->Stroke($this->img,$this->xscale,$this->ynscale[$i]); $this->ynplots[$i][$j]->StrokeMargin($this->img); } } if( $this->iIconDepth == DEPTH_FRONT) { $this->StrokeIcons(); } if( $this->iDoClipping ) { if( $this->img->a == 0 ) { $this->img->CopyCanvasH($oldimage,$this->img->img, $this->img->left_margin,$this->img->top_margin, $this->img->left_margin,$this->img->top_margin, $this->img->plotwidth+1,$this->img->plotheight); } elseif( $this->img->a == 90 ) { $adj = ($this->img->height - $this->img->width)/2; $this->img->CopyCanvasH($oldimage,$this->img->img, $this->img->bottom_margin-$adj,$this->img->left_margin+$adj, $this->img->bottom_margin-$adj,$this->img->left_margin+$adj, $this->img->plotheight+1,$this->img->plotwidth); } else { JpGraphError::RaiseL(25035,$this->img->a); } $this->img->Destroy(); $this->img->SetCanvasH($oldimage); } $this->xscale->off=$oldoff; if( $this->grid_depth == DEPTH_FRONT && !$_csim ) { $this->ygrid->Stroke(); $this->xgrid->Stroke(); } if( $this->bands!= null ) for($i=0; $i < count($this->bands); ++$i) { if( $this->bands[$i]->depth == DEPTH_FRONT ) $this->bands[$i]->Stroke($this->img,$this->xscale,$this->yscale); } if( $this->y2bands!= null && $this->y2scale != null ) for($i=0; $i < count($this->y2bands); ++$i) { if( $this->y2bands[$i]->depth == DEPTH_FRONT ) $this->y2bands[$i]->Stroke($this->img,$this->xscale,$this->y2scale); } if( $this->lines != null ) { for($i=0; $i < count($this->lines); ++$i) { $this->lines[$i]->Stroke($this->img,$this->xscale,$this->yscale); $this->lines[$i]->DoLegend($this); } } if( $this->y2lines != null && $this->y2scale != null ) { for($i=0; $i < count($this->y2lines); ++$i) { $this->y2lines[$i]->Stroke($this->img,$this->xscale,$this->y2scale); $this->y2lines[$i]->DoLegend($this); } } if( !$_csim ) { $this->StrokeAxis(); } if( $this->y2scale != null && !$_csim ) $this->y2axis->Stroke($this->xscale,false); if( !$_csim ) { $this->StrokePlotBox(); } $aa = $this->img->SetAngle(0); $this->StrokeTitles(); $this->footer->Stroke($this->img); $this->legend->Stroke($this->img); $this->img->SetAngle($aa); $this->StrokeTexts(); $this->StrokeTables(); if( !$_csim ) { $this->img->SetAngle($aa); if(_JPG_DEBUG) { $this->DisplayClientSideaImageMapAreas(); } if( $this->iImgTrans ) { if( !class_exists('ImgTrans') ) { require_once('jpgraph_imgtrans.php'); } $tform = new ImgTrans($this->img->img); $this->img->img = $tform->Skew3D($this->iImgTransHorizon,$this->iImgTransSkewDist, $this->iImgTransDirection,$this->iImgTransHighQ, $this->iImgTransMinSize,$this->iImgTransFillColor, $this->iImgTransBorder); } if( $aStrokeFileName == _IMG_HANDLER ) { return $this->img->img; } else { $this->cache->PutAndStream($this->img,$this->cache_name,$this->inline,$aStrokeFileName); } } } function SetAxisLabelBackground($aType,$aXFColor='lightgray',$aXColor='black',$aYFColor='lightgray',$aYColor='black') { $this->iAxisLblBgType = $aType; $this->iXAxisLblBgFillColor = $aXFColor; $this->iXAxisLblBgColor = $aXColor; $this->iYAxisLblBgFillColor = $aYFColor; $this->iYAxisLblBgColor = $aYColor; } function StrokeAxisLabelBackground() { $t = $this->iAxisLblBgType ; if( $t < 1 ) return; if( $t == 1 || $t == 3 || $t == 5 || $t == 6 ) { $this->img->PushColor($this->iXAxisLblBgFillColor); if( $t == 1 || $t == 6 ) { $xl = $this->img->left_margin; $yu = $this->img->height - $this->img->bottom_margin + 1; $xr = $this->img->width - $this->img->right_margin ; $yl = $this->img->height-1-$this->frame_weight; } else { $xl = $this->frame_weight; $yu = $this->img->height - $this->img->bottom_margin + 1; $xr = $this->img->width - 1 - $this->frame_weight; $yl = $this->img->height-1-$this->frame_weight; } $this->img->FilledRectangle($xl,$yu,$xr,$yl); $this->img->PopColor(); if( $this->iXAxisLblBgColor !== '' ) { $this->img->PushColor($this->iXAxisLblBgColor); if( $t == 1 || $t == 6 ) { $this->img->Line($xl,$yu,$xl,$yl); $this->img->Line($xr,$yu,$xr,$yl); } else { $xl = $this->img->width - $this->img->right_margin ; $this->img->Line($xl,$yu-1,$xr,$yu-1); } $this->img->PopColor(); } } if( $t == 2 || $t == 4 || $t == 5 || $t == 6 ) { $this->img->PushColor($this->iYAxisLblBgFillColor); if( $t == 2 || $t == 6 ) { $xl = $this->frame_weight; $yu = $this->frame_weight+$this->img->top_margin; $xr = $this->img->left_margin - 1; $yl = $this->img->height - $this->img->bottom_margin + 1; } else { $xl = $this->frame_weight; $yu = $this->frame_weight; $xr = $this->img->left_margin - 1; $yl = $this->img->height-1-$this->frame_weight; } $this->img->FilledRectangle($xl,$yu,$xr,$yl); $this->img->PopColor(); if( $this->iXAxisLblBgColor !== '' ) { $this->img->PushColor($this->iXAxisLblBgColor); if( $t == 2 || $t == 6 ) { $this->img->Line($xl,$yu-1,$xr,$yu-1); $this->img->Line($xl,$yl-1,$xr,$yl-1); } else { $this->img->Line($xr+1,$yu,$xr+1,$this->img->top_margin); } $this->img->PopColor(); } } } function StrokeAxis($aStrokeLabels=true) { if( $aStrokeLabels ) { $this->StrokeAxisLabelBackground(); } if( $this->iAxisStyle != AXSTYLE_SIMPLE ) { switch( $this->iAxisStyle ) { case AXSTYLE_BOXIN : $toppos = SIDE_DOWN; $bottompos = SIDE_UP; $leftpos = SIDE_RIGHT; $rightpos = SIDE_LEFT; break; case AXSTYLE_BOXOUT : $toppos = SIDE_UP; $bottompos = SIDE_DOWN; $leftpos = SIDE_LEFT; $rightpos = SIDE_RIGHT; break; case AXSTYLE_YBOXIN: $toppos = -100; $bottompos = SIDE_UP; $leftpos = SIDE_RIGHT; $rightpos = SIDE_LEFT; break; case AXSTYLE_YBOXOUT: $toppos = -100; $bottompos = SIDE_DOWN; $leftpos = SIDE_LEFT; $rightpos = SIDE_RIGHT; break; default: JpGRaphError::RaiseL(25036,$this->iAxisStyle); break; } $this->xaxis->SetPos('min'); $this->xscale->ticks->SupressFirst(false); $this->xaxis->SetLabelSide(SIDE_DOWN); $this->xaxis->scale->ticks->SetSide($bottompos); $this->xaxis->Stroke($this->yscale); if( $toppos != -100 ) { $maxis = $this->xaxis; $maxis->SetPos('max'); $maxis->SetLabelSide(SIDE_UP); $maxis->SetLabelMargin(7); $this->xaxis->scale->ticks->SetSide($toppos); $maxis->Stroke($this->yscale); } $this->yaxis->SetPos('min'); $this->yaxis->SetLabelMargin(10); $this->yaxis->SetLabelSide(SIDE_LEFT); $this->yaxis->scale->ticks->SetSide($leftpos); $this->yaxis->Stroke($this->xscale); $myaxis = $this->yaxis; $myaxis->SetPos('max'); $myaxis->SetLabelMargin(10); $myaxis->SetLabelSide(SIDE_RIGHT); $myaxis->title->Set(''); $myaxis->scale->ticks->SetSide($rightpos); $myaxis->Stroke($this->xscale); } else { $this->xaxis->Stroke($this->yscale,$aStrokeLabels); $this->yaxis->Stroke($this->xscale,$aStrokeLabels); } } function LoadBkgImage($aImgFormat='',$aFile='',$aImgStr='') { if( $aImgStr != '' ) { return Image::CreateFromString($aImgStr); } $e = explode('.',$aFile); $ext = strtolower($e[count($e)-1]); if ($ext == "jpeg") { $ext = "jpg"; } if( trim($ext) == '' ) $ext = 'png'; if( $aImgFormat == '' ) $imgtag = $ext; else $imgtag = $aImgFormat; $supported = imagetypes(); if( ( $ext == 'jpg' && !($supported & IMG_JPG) ) || ( $ext == 'gif' && !($supported & IMG_GIF) ) || ( $ext == 'png' && !($supported & IMG_PNG) ) ) { JpGraphError::RaiseL(25037,$aFile); } if( $imgtag == "jpg" || $imgtag == "jpeg") { $f = "imagecreatefromjpeg"; $imgtag = "jpg"; } else { $f = "imagecreatefrom".$imgtag; } if( $imgtag != $ext ) { JpGraphError::RaiseL(25038, $aImgFormat, $aFile); } $img = @$f($aFile); if( !$img ) { JpGraphError::RaiseL(25039,$aFile); } return $img; } function StrokeBackgroundGrad() { if( $this->bkg_gradtype < 0 ) return; $grad = new Gradient($this->img); if( $this->bkg_gradstyle == BGRAD_PLOT ) { $xl = $this->img->left_margin; $yt = $this->img->top_margin; $xr = $xl + $this->img->plotwidth+1 ; $yb = $yt + $this->img->plotheight ; $grad->FilledRectangle($xl,$yt,$xr,$yb,$this->bkg_gradfrom,$this->bkg_gradto,$this->bkg_gradtype); } else { $xl = 0; $yt = 0; $xr = $xl + $this->img->width - 1; $yb = $yt + $this->img->height; if( $this->doshadow ) { $xr -= $this->shadow_width; $yb -= $this->shadow_width; } if( $this->doframe ) { $yt += $this->frame_weight; $yb -= $this->frame_weight; $xl += $this->frame_weight; $xr -= $this->frame_weight; } $aa = $this->img->SetAngle(0); $grad->FilledRectangle($xl,$yt,$xr,$yb,$this->bkg_gradfrom,$this->bkg_gradto,$this->bkg_gradtype); $aa = $this->img->SetAngle($aa); } } function StrokeFrameBackground() { if( $this->background_image != "" && $this->background_cflag != "" ) { JpGraphError::RaiseL(25040); } if( $this->background_image != "" ) { $bkgimg = $this->LoadBkgImage($this->background_image_format,$this->background_image); } elseif( $this->background_cflag != "" ) { if( ! class_exists('FlagImages') ) { JpGraphError::RaiseL(25041); } $fobj = new FlagImages(FLAGSIZE4); $dummy=''; $bkgimg = $fobj->GetImgByName($this->background_cflag,$dummy); $this->background_image_mix = $this->background_cflag_mix; $this->background_image_type = $this->background_cflag_type; } else { return ; } $bw = ImageSX($bkgimg); $bh = ImageSY($bkgimg); $aa = $this->img->SetAngle(0); switch( $this->background_image_type ) { case BGIMG_FILLPLOT: $this->FillMarginArea(); $this->StrokeFrame(); if( $aa == 90 ) { $this->img->SetAngle(90); $this->FillPlotArea(); $aa = $this->img->SetAngle(0); $adj = ($this->img->height - $this->img->width)/2; $this->img->CopyMerge($bkgimg, $this->img->bottom_margin-$adj,$this->img->left_margin+$adj, 0,0, $this->img->plotheight+1,$this->img->plotwidth, $bw,$bh,$this->background_image_mix); } else { $this->FillPlotArea(); $this->img->CopyMerge($bkgimg, $this->img->left_margin,$this->img->top_margin, 0,0,$this->img->plotwidth+1,$this->img->plotheight, $bw,$bh,$this->background_image_mix); } break; case BGIMG_FILLFRAME: $hadj=0; $vadj=0; if( $this->doshadow ) { $hadj = $this->shadow_width; $vadj = $this->shadow_width; } $this->FillMarginArea(); $this->FillPlotArea(); $this->img->CopyMerge($bkgimg,0,0,0,0,$this->img->width-$hadj,$this->img->height-$vadj, $bw,$bh,$this->background_image_mix); $this->StrokeFrame(); break; case BGIMG_COPY: $this->FillMarginArea(); $this->FillPlotArea(); $this->img->CopyMerge($bkgimg,0,0,0,0,$bw,$bh, $bw,$bh,$this->background_image_mix); $this->StrokeFrame(); break; case BGIMG_CENTER: $this->FillMarginArea(); $this->FillPlotArea(); $centerx = round($this->img->plotwidth/2+$this->img->left_margin-$bw/2); $centery = round($this->img->plotheight/2+$this->img->top_margin-$bh/2); $this->img->CopyMerge($bkgimg,$centerx,$centery,0,0,$bw,$bh, $bw,$bh,$this->background_image_mix); $this->StrokeFrame(); break; default: JpGraphError::RaiseL(25042); } $this->img->SetAngle($aa); } function StrokeFrame() { if( !$this->doframe ) return; if( $this->background_image_type <= 1 && ($this->bkg_gradtype < 0 || ($this->bkg_gradtype > 0 && $this->bkg_gradstyle==BGRAD_PLOT)) ) { $c = $this->margin_color; } else { $c = false; } if( $this->doshadow ) { $this->img->SetColor($this->frame_color); $this->img->ShadowRectangle(0,0,$this->img->width,$this->img->height, $c,$this->shadow_width,$this->shadow_color); } elseif( $this->framebevel ) { if( $c ) { $this->img->SetColor($this->margin_color); $this->img->FilledRectangle(0,0,$this->img->width-1,$this->img->height-1); } $this->img->Bevel(1,1,$this->img->width-2,$this->img->height-2, $this->framebeveldepth, $this->framebevelcolor1,$this->framebevelcolor2); if( $this->framebevelborder ) { $this->img->SetColor($this->framebevelbordercolor); $this->img->Rectangle(0,0,$this->img->width-1,$this->img->height-1); } } else { $this->img->SetLineWeight($this->frame_weight); if( $c ) { $this->img->SetColor($this->margin_color); $this->img->FilledRectangle(0,0,$this->img->width-1,$this->img->height-1); } $this->img->SetColor($this->frame_color); $this->img->Rectangle(0,0,$this->img->width-1,$this->img->height-1); } } function FillMarginArea() { $hadj=0; $vadj=0; if( $this->doshadow ) { $hadj = $this->shadow_width; $vadj = $this->shadow_width; } $this->img->SetColor($this->margin_color); $this->img->FilledRectangle(0,0,$this->img->width-1-$hadj,$this->img->top_margin); $this->img->FilledRectangle(0,$this->img->top_margin,$this->img->left_margin,$this->img->height-1-$hadj); $this->img->FilledRectangle($this->img->left_margin+1, $this->img->height-$this->img->bottom_margin, $this->img->width-1-$hadj, $this->img->height-1-$hadj); $this->img->FilledRectangle($this->img->width-$this->img->right_margin, $this->img->top_margin+1, $this->img->width-1-$hadj, $this->img->height-$this->img->bottom_margin-1); } function FillPlotArea() { $this->img->PushColor($this->plotarea_color); $this->img->FilledRectangle($this->img->left_margin, $this->img->top_margin, $this->img->width-$this->img->right_margin, $this->img->height-$this->img->bottom_margin); $this->img->PopColor(); } function StrokePlotArea() { $boxadj = 0; $adj = 0; if( $this->background_image != "" || $this->background_cflag != "" ) { $this->StrokeFrameBackground(); } else { $aa = $this->img->SetAngle(0); $this->StrokeFrame(); $aa = $this->img->SetAngle($aa); $this->StrokeBackgroundGrad(); if( $this->bkg_gradtype < 0 || ($this->bkg_gradtype > 0 && $this->bkg_gradstyle==BGRAD_MARGIN) ) { $this->FillPlotArea(); } } } function StrokeIcons() { $n = count($this->iIcons); for( $i=0; $i < $n; ++$i ) { $this->iIcons[$i]->StrokeWithScale($this->img,$this->xscale,$this->yscale); } } function StrokePlotBox() { if( $this->boxed ) { $this->img->SetLineWeight(1); $this->img->SetLineStyle('solid'); $this->img->SetColor($this->box_color); for($i=0; $i < $this->box_weight; ++$i ) { $this->img->Rectangle( $this->img->left_margin-$i,$this->img->top_margin-$i, $this->img->width-$this->img->right_margin+$i, $this->img->height-$this->img->bottom_margin+$i); } } } function SetTitleBackgroundFillStyle($aStyle,$aColor1='black',$aColor2='white') { $this->titlebkg_fillstyle = $aStyle; $this->titlebkg_scolor1 = $aColor1; $this->titlebkg_scolor2 = $aColor2; } function SetTitleBackground($aBackColor='gray', $aStyle=TITLEBKG_STYLE1, $aFrameStyle=TITLEBKG_FRAME_NONE, $aFrameColor='black', $aFrameWeight=1, $aBevelHeight=3, $aEnable=true) { $this->titlebackground = $aEnable; $this->titlebackground_color = $aBackColor; $this->titlebackground_style = $aStyle; $this->titlebackground_framecolor = $aFrameColor; $this->titlebackground_framestyle = $aFrameStyle; $this->titlebackground_frameweight = $aFrameWeight; $this->titlebackground_bevelheight = $aBevelHeight ; } function StrokeTitles() { $margin=3; if( $this->titlebackground ) { $this->title->margin += 2 ; $h = $this->title->GetTextHeight($this->img)+$this->title->margin+$margin; if( $this->subtitle->t != "" && !$this->subtitle->hide ) { $h += $this->subtitle->GetTextHeight($this->img)+$margin+ $this->subtitle->margin; $h += 2; } if( $this->subsubtitle->t != "" && !$this->subsubtitle->hide ) { $h += $this->subsubtitle->GetTextHeight($this->img)+$margin+ $this->subsubtitle->margin; $h += 2; } $this->img->PushColor($this->titlebackground_color); if( $this->titlebackground_style === TITLEBKG_STYLE1 ) { if( $this->framebevel ) { $x1 = $y1 = $this->framebeveldepth + 1 ; $x2 = $this->img->width - $this->framebeveldepth - 2 ; $this->title->margin += $this->framebeveldepth + 1 ; $h += $y1 ; $h += 2; } else { $x1 = $y1 = $this->frame_weight; $x2 = $this->img->width - 2*$x1; } } elseif( $this->titlebackground_style === TITLEBKG_STYLE2 ) { $x1 = $y1 = 0; $x2 = $this->img->width - 1 ; } elseif( $this->titlebackground_style === TITLEBKG_STYLE3 ) { $x1 = $y1 = 0; $x2 = $this->img->width - 1 ; $h += $this->framebeveldepth ; $this->title->margin += $this->framebeveldepth ; } else { JpGraphError::RaiseL(25043); } if( $this->titlebackground_framestyle === 3 ) { $h += $this->titlebackground_bevelheight*2 + 1 ; $this->title->margin += $this->titlebackground_bevelheight ; } if( $this->doshadow ) { $x2 -= $this->shadow_width ; } $indent=0; if( $this->titlebackground_framestyle == TITLEBKG_FRAME_BEVEL ) { $ind = $this->titlebackground_bevelheight; } if( $this->titlebkg_fillstyle==TITLEBKG_FILLSTYLE_HSTRIPED ) { $this->img->FilledRectangle2($x1+$ind,$y1+$ind,$x2-$ind,$h-$ind, $this->titlebkg_scolor1, $this->titlebkg_scolor2); } elseif( $this->titlebkg_fillstyle==TITLEBKG_FILLSTYLE_VSTRIPED ) { $this->img->FilledRectangle2($x1+$ind,$y1+$ind,$x2-$ind,$h-$ind, $this->titlebkg_scolor1, $this->titlebkg_scolor2,2); } else { $this->img->FilledRectangle($x1,$y1,$x2,$h); } $this->img->PopColor(); $this->img->PushColor($this->titlebackground_framecolor); $this->img->SetLineWeight($this->titlebackground_frameweight); if( $this->titlebackground_framestyle == TITLEBKG_FRAME_FULL ) { $this->img->Rectangle($x1,$y1,$x2,$h); } elseif( $this->titlebackground_framestyle == TITLEBKG_FRAME_BOTTOM ) { $this->img->Line($x1,$h,$x2,$h); } elseif( $this->titlebackground_framestyle == TITLEBKG_FRAME_BEVEL ) { $this->img->Bevel($x1,$y1,$x2,$h,$this->titlebackground_bevelheight); } $this->img->PopColor(); if( $this->framebevel && $this->doframe && $this->titlebackground_style === 3 ) { $this->img->Bevel(1,1,$this->img->width-2,$this->img->height-2, $this->framebeveldepth, $this->framebevelcolor1,$this->framebevelcolor2); if( $this->framebevelborder ) { $this->img->SetColor($this->framebevelbordercolor); $this->img->Rectangle(0,0,$this->img->width-1,$this->img->height-1); } } } $y = $this->title->margin; if( $this->title->halign == 'center' ) $this->title->Center(0,$this->img->width,$y); elseif( $this->title->halign == 'left' ) { $this->title->SetPos($this->title->margin+2,$y); } elseif( $this->title->halign == 'right' ) { $indent = 0; if( $this->doshadow ) $indent = $this->shadow_width+2; $this->title->SetPos($this->img->width-$this->title->margin-$indent,$y,'right'); } $this->title->Stroke($this->img); $y += $this->title->GetTextHeight($this->img) + $margin + $this->subtitle->margin; if( $this->subtitle->halign == 'center' ) $this->subtitle->Center(0,$this->img->width,$y); elseif( $this->subtitle->halign == 'left' ) { $this->subtitle->SetPos($this->subtitle->margin+2,$y); } elseif( $this->subtitle->halign == 'right' ) { $indent = 0; if( $this->doshadow ) $indent = $this->shadow_width+2; $this->subtitle->SetPos($this->img->width-$this->subtitle->margin-$indent,$y,'right'); } $this->subtitle->Stroke($this->img); $y += $this->subtitle->GetTextHeight($this->img) + $margin + $this->subsubtitle->margin; if( $this->subsubtitle->halign == 'center' ) $this->subsubtitle->Center(0,$this->img->width,$y); elseif( $this->subsubtitle->halign == 'left' ) { $this->subsubtitle->SetPos($this->subsubtitle->margin+2,$y); } elseif( $this->subsubtitle->halign == 'right' ) { $indent = 0; if( $this->doshadow ) $indent = $this->shadow_width+2; $this->subsubtitle->SetPos($this->img->width-$this->subsubtitle->margin-$indent,$y,'right'); } $this->subsubtitle->Stroke($this->img); $this->tabtitle->Stroke($this->img); } function StrokeTexts() { if( $this->texts != null ) { for($i=0; $i < count($this->texts); ++$i) { $this->texts[$i]->StrokeWithScale($this->img,$this->xscale,$this->yscale); } } if( $this->y2texts != null && $this->y2scale != null ) { for($i=0; $i < count($this->y2texts); ++$i) { $this->y2texts[$i]->StrokeWithScale($this->img,$this->xscale,$this->y2scale); } } } function StrokeTables() { if( $this->iTables != null ) { $n = count($this->iTables); for( $i=0; $i < $n; ++$i ) { $this->iTables[$i]->StrokeWithScale($this->img,$this->xscale,$this->yscale); } } } function DisplayClientSideaImageMapAreas() { $csim=''; foreach ($this->plots as $p) { $csim.= $p->GetCSIMareas(); } $csim .= $this->legend->GetCSIMareas(); if (preg_match_all("/area shape=\"(\w+)\" coords=\"([0-9\, ]+)\"/", $csim, $coords)) { $this->img->SetColor($this->csimcolor); $n = count($coords[0]); for ($i=0; $i < $n; $i++) { if ($coords[1][$i]=="poly") { preg_match_all('/\s*([0-9]+)\s*,\s*([0-9]+)\s*,*/',$coords[2][$i],$pts); $this->img->SetStartPoint($pts[1][count($pts[0])-1],$pts[2][count($pts[0])-1]); $m = count($pts[0]); for ($j=0; $j < $m; $j++) { $this->img->LineTo($pts[1][$j],$pts[2][$j]); } } else if ($coords[1][$i]=="rect") { $pts = preg_split('/,/', $coords[2][$i]); $this->img->SetStartPoint($pts[0],$pts[1]); $this->img->LineTo($pts[2],$pts[1]); $this->img->LineTo($pts[2],$pts[3]); $this->img->LineTo($pts[0],$pts[3]); $this->img->LineTo($pts[0],$pts[1]); } } } } function SetTextScaleOff($aOff) { $this->text_scale_off = $aOff; $this->xscale->text_scale_off = $aOff; } function SetTextScaleAbsCenterOff($aOff) { $this->text_scale_abscenteroff = $aOff; } function GetLinesYMinMax( $aLines ) { $n = count($aLines); if( $n == 0 ) return false; $min = $aLines[0]->scaleposition ; $max = $min ; $flg = false; for( $i=0; $i < $n; ++$i ) { if( $aLines[$i]->direction == HORIZONTAL ) { $flg = true ; $v = $aLines[$i]->scaleposition ; if( $min > $v ) $min = $v ; if( $max < $v ) $max = $v ; } } return $flg ? array($min,$max) : false ; } function GetLinesXMinMax( $aLines ) { $n = count($aLines); if( $n == 0 ) return false ; $min = $aLines[0]->scaleposition ; $max = $min ; $flg = false; for( $i=0; $i < $n; ++$i ) { if( $aLines[$i]->direction == VERTICAL ) { $flg = true ; $v = $aLines[$i]->scaleposition ; if( $min > $v ) $min = $v ; if( $max < $v ) $max = $v ; } } return $flg ? array($min,$max) : false ; } function GetPlotsYMinMax(&$aPlots) { $n = count($aPlots); $i=0; do { list($xmax,$max) = $aPlots[$i]->Max(); } while( ++$i < $n && !is_numeric($max) ); $i=0; do { list($xmin,$min) = $aPlots[$i]->Min(); } while( ++$i < $n && !is_numeric($min) ); if( !is_numeric($min) || !is_numeric($max) ) { JpGraphError::RaiseL(25044); } list($xmax,$max) = $aPlots[0]->Max(); list($xmin,$min) = $aPlots[0]->Min(); for($i=0; $i < count($aPlots); ++$i ) { list($xmax,$ymax)=$aPlots[$i]->Max(); list($xmin,$ymin)=$aPlots[$i]->Min(); if (is_numeric($ymax)) $max=max($max,$ymax); if (is_numeric($ymin)) $min=min($min,$ymin); } if( $min == '' ) $min = 0; if( $max == '' ) $max = 0; if( $min == 0 && $max == 0 ) { $min=0;$max=1; } return array($min,$max); } } class LineProperty { var $iWeight=1, $iColor="black",$iStyle="solid"; var $iShow=true; function SetColor($aColor) { $this->iColor = $aColor; } function SetWeight($aWeight) { $this->iWeight = $aWeight; } function SetStyle($aStyle) { $this->iStyle = $aStyle; } function Show($aShow=true) { $this->iShow=$aShow; } function Stroke(&$aImg,$aX1,$aY1,$aX2,$aY2) { if( $this->iShow ) { $aImg->PushColor($this->iColor); $oldls = $aImg->line_style; $oldlw = $aImg->line_weight; $aImg->SetLineWeight($this->iWeight); $aImg->SetLineStyle($this->iStyle); $aImg->StyleLine($aX1,$aY1,$aX2,$aY2); $aImg->PopColor($this->iColor); $aImg->line_style = $oldls; $aImg->line_weight = $oldlw; } } } class Text { var $t,$x=0,$y=0,$halign="left",$valign="top",$color=array(0,0,0); var $font_family=FF_FONT1,$font_style=FS_NORMAL,$font_size=10; var $hide=false, $dir=0; var $boxed=false; var $paragraph_align="left"; var $margin=0; var $icornerradius=0,$ishadowwidth=3; var $iScalePosY=null,$iScalePosX=null; var $iWordwrap=0; var $fcolor='white',$bcolor='black',$shadow=false; var $iCSIMarea='',$iCSIMalt='',$iCSIMtarget=''; function Text($aTxt='',$aXAbsPos=0,$aYAbsPos=0) { if( ! is_string($aTxt) ) { JpGraphError::RaiseL(25050); } $this->t = $aTxt; $this->x = round($aXAbsPos); $this->y = round($aYAbsPos); $this->margin = 0; } function Set($aTxt) { $this->t = $aTxt; } function SetPos($aXAbsPos=0,$aYAbsPos=0,$aHAlign="left",$aVAlign="top") { $this->Pos($aXAbsPos,$aYAbsPos,$aHAlign,$aVAlign); } function Pos($aXAbsPos=0,$aYAbsPos=0,$aHAlign="left",$aVAlign="top") { $this->x = $aXAbsPos; $this->y = $aYAbsPos; $this->halign = $aHAlign; $this->valign = $aVAlign; } function SetScalePos($aX,$aY) { $this->iScalePosX = $aX; $this->iScalePosY = $aY; } function Align($aHAlign,$aVAlign="top",$aParagraphAlign="") { $this->halign = $aHAlign; $this->valign = $aVAlign; if( $aParagraphAlign != "" ) $this->paragraph_align = $aParagraphAlign; } function SetAlign($aHAlign,$aVAlign="top",$aParagraphAlign="") { $this->Align($aHAlign,$aVAlign,$aParagraphAlign); } function ParagraphAlign($aAlign) { $this->paragraph_align = $aAlign; } function SetParagraphAlign($aAlign) { $this->paragraph_align = $aAlign; } function SetShadow($aShadowColor='darkgray',$aShadowWidth=3) { $this->ishadowwidth=$aShadowWidth; $this->shadow=$aShadowColor; $this->boxed=true; } function SetWordWrap($aCol) { $this->iWordwrap = $aCol ; } function SetBox($aFrameColor=array(255,255,255),$aBorderColor=array(0,0,0),$aShadowColor=false,$aCornerRadius=4,$aShadowWidth=3) { if( $aFrameColor==false ) $this->boxed=false; else $this->boxed=true; $this->fcolor=$aFrameColor; $this->bcolor=$aBorderColor; if( $aShadowColor === true ) $aShadowColor = 'gray'; $this->shadow=$aShadowColor; $this->icornerradius=$aCornerRadius; $this->ishadowwidth=$aShadowWidth; } function Hide($aHide=true) { $this->hide=$aHide; } function Show($aShow=true) { $this->hide=!$aShow; } function SetFont($aFamily,$aStyle=FS_NORMAL,$aSize=10) { $this->font_family=$aFamily; $this->font_style=$aStyle; $this->font_size=$aSize; } function Center($aLeft,$aRight,$aYAbsPos=false) { $this->x = $aLeft + ($aRight-$aLeft )/2; $this->halign = "center"; if( is_numeric($aYAbsPos) ) $this->y = $aYAbsPos; } function SetColor($aColor) { $this->color = $aColor; } function SetAngle($aAngle) { $this->SetOrientation($aAngle); } function SetOrientation($aDirection=0) { if( is_numeric($aDirection) ) $this->dir=$aDirection; elseif( $aDirection=="h" ) $this->dir = 0; elseif( $aDirection=="v" ) $this->dir = 90; else JpGraphError::RaiseL(25051); } function GetWidth(&$aImg) { $aImg->SetFont($this->font_family,$this->font_style,$this->font_size); $w = $aImg->GetTextWidth($this->t,$this->dir); return $w; } function GetFontHeight(&$aImg) { $aImg->SetFont($this->font_family,$this->font_style,$this->font_size); $h = $aImg->GetFontHeight(); return $h; } function GetTextHeight(&$aImg) { $aImg->SetFont($this->font_family,$this->font_style,$this->font_size); $h = $aImg->GetTextHeight($this->t,$this->dir); return $h; } function GetHeight(&$aImg) { $aImg->SetFont($this->font_family,$this->font_style,$this->font_size); $h = $aImg->GetTextHeight($this->t,$this->dir); return $h; } function SetMargin($aMarg) { $this->margin = $aMarg; } function StrokeWithScale(&$aImg,$axscale,$ayscale) { if( $this->iScalePosX === null || $this->iScalePosY === null ) { $this->Stroke($aImg); } else { $this->Stroke($aImg, round($axscale->Translate($this->iScalePosX)), round($ayscale->Translate($this->iScalePosY))); } } function SetCSIMTarget($aTarget,$aAlt=null) { $this->iCSIMtarget = $aTarget; $this->iCSIMalt = $aAlt; } function GetCSIMareas() { if( $this->iCSIMtarget !== '' ) return $this->iCSIMarea; else return ''; } function Stroke(&$aImg,$x=null,$y=null) { if( !empty($x) ) $this->x = round($x); if( !empty($y) ) $this->y = round($y); if( $this->iWordwrap > 0 ) { $this->t = wordwrap($this->t,$this->iWordwrap,"\n"); } if( $this->x < 1 && $this->x > 0 ) $this->x *= $aImg->width; if( $this->y < 1 && $this->y > 0 ) $this->y *= $aImg->height; $aImg->PushColor($this->color); $aImg->SetFont($this->font_family,$this->font_style,$this->font_size); $aImg->SetTextAlign($this->halign,$this->valign); if( $this->boxed ) { if( $this->fcolor=="nofill" ) $this->fcolor=false; $aImg->SetLineWeight(1); $bbox = $aImg->StrokeBoxedText($this->x,$this->y,$this->t, $this->dir,$this->fcolor,$this->bcolor,$this->shadow, $this->paragraph_align,5,5,$this->icornerradius, $this->ishadowwidth); } else { $bbox = $aImg->StrokeText($this->x,$this->y,$this->t,$this->dir,$this->paragraph_align); } $coords = $bbox[0].','.$bbox[1].','.$bbox[2].','.$bbox[3].','.$bbox[4].','.$bbox[5].','.$bbox[6].','.$bbox[7]; $this->iCSIMarea = "<area shape=\"poly\" coords=\"$coords\" href=\"".htmlentities($this->iCSIMtarget)."\""; $this->iCSIMarea .= " alt=\"".$this->iCSIMalt."\" title=\"".$this->iCSIMalt."\" />\n"; $aImg->PopColor($this->color); } } class GraphTabTitle extends Text{ var $corner = 6 , $posx = 7, $posy = 4; var $color='darkred',$fillcolor='lightyellow',$bordercolor='black'; var $align = 'left', $width=TABTITLE_WIDTHFIT; function GraphTabTitle() { $this->t = ''; $this->font_style = FS_BOLD; $this->hide = true; } function SetColor($aTxtColor,$aFillColor='lightyellow',$aBorderColor='black') { $this->color = $aTxtColor; $this->fillcolor = $aFillColor; $this->bordercolor = $aBorderColor; } function SetFillColor($aFillColor) { $this->fillcolor = $aFillColor; } function SetTabAlign($aAlign) { $this->align = $aAlign; } function SetPos($aAlign) { $this->align = $aAlign; } function SetWidth($aWidth) { $this->width = $aWidth ; } function Set($t) { $this->t = $t; $this->hide = false; } function SetCorner($aD) { $this->corner = $aD ; } function Stroke(&$aImg) { if( $this->hide ) return; $this->boxed = false; $w = $this->GetWidth($aImg) + 2*$this->posx; $h = $this->GetTextHeight($aImg) + 2*$this->posy; $x = $aImg->left_margin; $y = $aImg->top_margin; if( $this->width === TABTITLE_WIDTHFIT ) { if( $this->align == 'left' ) { $p = array($x, $y, $x, $y-$h+$this->corner, $x + $this->corner,$y-$h, $x + $w - $this->corner, $y-$h, $x + $w, $y-$h+$this->corner, $x + $w, $y); } elseif( $this->align == 'center' ) { $x += round($aImg->plotwidth/2) - round($w/2); $p = array($x, $y, $x, $y-$h+$this->corner, $x + $this->corner, $y-$h, $x + $w - $this->corner, $y-$h, $x + $w, $y-$h+$this->corner, $x + $w, $y); } else { $x += $aImg->plotwidth -$w; $p = array($x, $y, $x, $y-$h+$this->corner, $x + $this->corner,$y-$h, $x + $w - $this->corner, $y-$h, $x + $w, $y-$h+$this->corner, $x + $w, $y); } } else { if( $this->width === TABTITLE_WIDTHFULL ) $w = $aImg->plotwidth ; else $w = $this->width ; $p = array($x, $y, $x, $y-$h+$this->corner, $x + $this->corner,$y-$h, $x + $w - $this->corner, $y-$h, $x + $w, $y-$h+$this->corner, $x + $w, $y); } if( $this->halign == 'left' ) { $aImg->SetTextAlign('left','bottom'); $x += $this->posx; $y -= $this->posy; } elseif( $this->halign == 'center' ) { $aImg->SetTextAlign('center','bottom'); $x += $w/2; $y -= $this->posy; } else { $aImg->SetTextAlign('right','bottom'); $x += $w - $this->posx; $y -= $this->posy; } $aImg->SetColor($this->fillcolor); $aImg->FilledPolygon($p); $aImg->SetColor($this->bordercolor); $aImg->Polygon($p,true); $aImg->SetColor($this->color); $aImg->SetFont($this->font_family,$this->font_style,$this->font_size); $aImg->StrokeText($x,$y,$this->t,0,'center'); } } class SuperScriptText extends Text { var $iSuper=""; var $sfont_family="",$sfont_style="",$sfont_size=8; var $iSuperMargin=2,$iVertOverlap=4,$iSuperScale=0.65; var $iSDir=0; var $iSimple=false; function SuperScriptText($aTxt="",$aSuper="",$aXAbsPos=0,$aYAbsPos=0) { parent::Text($aTxt,$aXAbsPos,$aYAbsPos); $this->iSuper = $aSuper; } function FromReal($aVal,$aPrecision=2) { $neg=1.0; if( $aVal < 0 ) { $neg = -1.0; $aVal = -$aVal; } $l = floor(log10($aVal)); $a = sprintf("%0.".$aPrecision."f",round($aVal / pow(10,$l),$aPrecision)); $a *= $neg; if( $this->iSimple && ($a == 1 || $a==-1) ) $a = ''; if( $a != '' ) $this->t = $a.' * 10'; else { if( $neg == 1 ) $this->t = '10'; else $this->t = '-10'; } $this->iSuper = $l; } function Set($aTxt,$aSuper="") { $this->t = $aTxt; $this->iSuper = $aSuper; } function SetSuperFont($aFontFam,$aFontStyle=FS_NORMAL,$aFontSize=8) { $this->sfont_family = $aFontFam; $this->sfont_style = $aFontStyle; $this->sfont_size = $aFontSize; } function GetWidth(&$aImg) { $aImg->SetFont($this->font_family,$this->font_style,$this->font_size); $w = $aImg->GetTextWidth($this->t); $aImg->SetFont($this->sfont_family,$this->sfont_style,$this->sfont_size); $w += $aImg->GetTextWidth($this->iSuper); $w += $this->iSuperMargin; return $w; } function GetFontHeight(&$aImg) { $aImg->SetFont($this->font_family,$this->font_style,$this->font_size); $h = $aImg->GetFontHeight(); $aImg->SetFont($this->sfont_family,$this->sfont_style,$this->sfont_size); $h += $aImg->GetFontHeight(); return $h; } function GetTextHeight(&$aImg) { $aImg->SetFont($this->font_family,$this->font_style,$this->font_size); $h = $aImg->GetTextHeight($this->t); $aImg->SetFont($this->sfont_family,$this->sfont_style,$this->sfont_size); $h += $aImg->GetTextHeight($this->iSuper); return $h; } function Stroke(&$aImg,$ax=-1,$ay=-1) { $w = parent::GetWidth($aImg); $h = parent::GetTextHeight($aImg); switch( $this->valign ) { case 'top': $sy = $this->y; break; case 'center': $sy = $this->y - $h/2; break; case 'bottom': $sy = $this->y - $h; break; default: JpGraphError::RaiseL(25052); break; } switch( $this->halign ) { case 'left': $sx = $this->x + $w; break; case 'center': $sx = $this->x + $w/2; break; case 'right': $sx = $this->x; break; default: JpGraphError::RaiseL(25053); break; } $sx += $this->iSuperMargin; $sy += $this->iVertOverlap; if( $this->sfont_family == "" ) { if( $this->font_family <= FF_FONT2 ) { if( $this->font_family == FF_FONT0 ) { $sff = FF_FONT0; } elseif( $this->font_family == FF_FONT1 ) { if( $this->font_style == FS_NORMAL ) $sff = FF_FONT0; else $sff = FF_FONT1; } else { $sff = FF_FONT1; } $sfs = $this->font_style; $sfz = $this->font_size; } else { $sff = $this->font_family; $sfs = $this->font_style; $sfz = floor($this->font_size*$this->iSuperScale); if( $sfz < 8 ) $sfz = 8; } $this->sfont_family = $sff; $this->sfont_style = $sfs; $this->sfont_size = $sfz; } else { $sff = $this->sfont_family; $sfs = $this->sfont_style; $sfz = $this->sfont_size; } parent::Stroke($aImg,$ax,$ay); if( $sff <= FF_FONT2 ) { $sx -= 2; $sy += 3; } $aImg->SetTextAlign('left','bottom'); $aImg->SetFont($sff,$sfs,$sfz); $aImg->PushColor($this->color); $aImg->StrokeText($sx,$sy,$this->iSuper,$this->iSDir,'left'); $aImg->PopColor(); } } class Grid { var $img; var $scale; var $grid_color='#DDDDDD',$grid_mincolor='#DDDDDD'; var $type="solid"; var $show=false, $showMinor=false,$weight=1; var $fill=false,$fillcolor=array('#EFEFEF','#BBCCFF'); function Grid(&$aAxis) { $this->scale = &$aAxis->scale; $this->img = &$aAxis->img; } function SetColor($aMajColor,$aMinColor=false) { $this->grid_color=$aMajColor; if( $aMinColor === false ) $aMinColor = $aMajColor ; $this->grid_mincolor = $aMinColor; } function SetWeight($aWeight) { $this->weight=$aWeight; } function SetLineStyle($aType) { $this->type = $aType; } function Show($aShowMajor=true,$aShowMinor=false) { $this->show=$aShowMajor; $this->showMinor=$aShowMinor; } function SetFill($aFlg=true,$aColor1='lightgray',$aColor2='lightblue') { $this->fill = $aFlg; $this->fillcolor = array( $aColor1, $aColor2 ); } function Stroke() { if( $this->showMinor && !$this->scale->textscale ) { $tmp = $this->grid_color; $this->grid_color = $this->grid_mincolor; $this->DoStroke($this->scale->ticks->ticks_pos); $this->grid_color = $tmp; $this->DoStroke($this->scale->ticks->maj_ticks_pos); } else { $this->DoStroke($this->scale->ticks->maj_ticks_pos); } } function DoStroke(&$aTicksPos) { if( !$this->show ) return; $nbrgrids = count($aTicksPos); if( $this->scale->type=="y" ) { $xl=$this->img->left_margin; $xr=$this->img->width-$this->img->right_margin; if( $this->fill ) { $y2 = $aTicksPos[0]; $i=1; while( $i < $nbrgrids ) { $y1 = $y2; $y2 = $aTicksPos[$i++]; $this->img->SetColor($this->fillcolor[$i & 1]); $this->img->FilledRectangle($xl,$y1,$xr,$y2); } } $this->img->SetColor($this->grid_color); $this->img->SetLineWeight($this->weight); for($i=0; $i<$nbrgrids; ++$i) { $y=$aTicksPos[$i]; if( $this->type == "solid" ) $this->img->Line($xl,$y,$xr,$y); elseif( $this->type == "dotted" ) $this->img->DashedLine($xl,$y,$xr,$y,1,6); elseif( $this->type == "dashed" ) $this->img->DashedLine($xl,$y,$xr,$y,2,4); elseif( $this->type == "longdashed" ) $this->img->DashedLine($xl,$y,$xr,$y,8,6); } } elseif( $this->scale->type=="x" ) { $yu=$this->img->top_margin; $yl=$this->img->height-$this->img->bottom_margin; $limit=$this->img->width-$this->img->right_margin; if( $this->fill ) { $x2 = $aTicksPos[0]; $i=1; while( $i < $nbrgrids ) { $x1 = $x2; $x2 = min($aTicksPos[$i++],$limit) ; $this->img->SetColor($this->fillcolor[$i & 1]); $this->img->FilledRectangle($x1,$yu,$x2,$yl); } } $this->img->SetColor($this->grid_color); $this->img->SetLineWeight($this->weight); $i=0; $x=$aTicksPos[$i]; while( $i<count($aTicksPos) && ($x=$aTicksPos[$i]) <= $limit ) { if( $this->type == "solid" ) $this->img->Line($x,$yl,$x,$yu); elseif( $this->type == "dotted" ) $this->img->DashedLine($x,$yl,$x,$yu,1,6); elseif( $this->type == "dashed" ) $this->img->DashedLine($x,$yl,$x,$yu,2,4); elseif( $this->type == "longdashed" ) $this->img->DashedLine($x,$yl,$x,$yu,8,6); ++$i; } } else { JpGraphError::RaiseL(25054,$this->scale->type); } return true; } } class Axis { var $pos = false; var $weight=1; var $color=array(0,0,0),$label_color=array(0,0,0); var $img=null,$scale=null; var $hide=false; var $ticks_label=false, $ticks_label_colors=null; var $show_first_label=true,$show_last_label=true; var $label_step=1; var $tick_step=1; var $labelPos=0; var $title=null,$title_adjust,$title_margin,$title_side=SIDE_LEFT; var $font_family=FF_FONT1,$font_style=FS_NORMAL,$font_size=10,$label_angle=0; var $tick_label_margin=7; var $label_halign = '',$label_valign = '', $label_para_align='left'; var $hide_line=false,$hide_labels=false; var $iDeltaAbsPos=0; function Axis(&$img,&$aScale,$color=array(0,0,0)) { $this->img = &$img; $this->scale = &$aScale; $this->color = $color; $this->title=new Text(""); if( $aScale->type=="y" ) { $this->title_margin = 25; $this->title_adjust="middle"; $this->title->SetOrientation(90); $this->tick_label_margin=7; $this->labelPos=SIDE_LEFT; } else { $this->title_margin = 5; $this->title_adjust="high"; $this->title->SetOrientation(0); $this->tick_label_margin=7; $this->labelPos=SIDE_DOWN; $this->title_side=SIDE_DOWN; } } function SetLabelFormat($aFormStr) { $this->scale->ticks->SetLabelFormat($aFormStr); } function SetLabelFormatString($aFormStr,$aDate=false) { $this->scale->ticks->SetLabelFormat($aFormStr,$aDate); } function SetLabelFormatCallback($aFuncName) { $this->scale->ticks->SetFormatCallback($aFuncName); } function SetLabelAlign($aHAlign,$aVAlign="top",$aParagraphAlign='left') { $this->label_halign = $aHAlign; $this->label_valign = $aVAlign; $this->label_para_align = $aParagraphAlign; } function HideFirstTickLabel($aShow=false) { $this->show_first_label=$aShow; } function HideLastTickLabel($aShow=false) { $this->show_last_label=$aShow; } function SetTickPositions($aMajPos,$aMinPos=NULL,$aLabels=NULL) { $this->scale->ticks->SetTickPositions($aMajPos,$aMinPos,$aLabels); } function SetMajTickPositions($aMajPos,$aLabels=NULL) { $this->scale->ticks->SetTickPositions($aMajPos,NULL,$aLabels); } function HideTicks($aHideMinor=true,$aHideMajor=true) { $this->scale->ticks->SupressMinorTickMarks($aHideMinor); $this->scale->ticks->SupressTickMarks($aHideMajor); } function HideZeroLabel($aFlag=true) { $this->scale->ticks->SupressZeroLabel(); } function HideFirstLastLabel() { $this->scale->ticks->SupressLast(); $this->scale->ticks->SupressFirst(); $this->show_first_label = false; $this->show_last_label = false; } function Hide($aHide=true) { $this->hide=$aHide; } function HideLine($aHide=true) { $this->hide_line = $aHide; } function HideLabels($aHide=true) { $this->hide_labels = $aHide; } function SetWeight($aWeight) { $this->weight = $aWeight; } function SetColor($aColor,$aLabelColor=false) { $this->color = $aColor; if( !$aLabelColor ) $this->label_color = $aColor; else $this->label_color = $aLabelColor; } function SetTitle($aTitle,$aAdjustAlign="high") { $this->title->Set($aTitle); $this->title_adjust=$aAdjustAlign; } function SetTitleMargin($aMargin) { $this->title_margin=$aMargin; } function SetTitleSide($aSideOfAxis) { $this->title_side = $aSideOfAxis; } function SetTickDirection($aDir) { if( ERR_DEPRECATED ) JpGraphError::RaiseL(25055); $this->scale->ticks->SetSide($aDir); } function SetTickSide($aDir) { $this->scale->ticks->SetSide($aDir); } function SetTickLabels($aLabelArray,$aLabelColorArray=null) { $this->ticks_label = $aLabelArray; $this->ticks_label_colors = $aLabelColorArray; } function SetTickLabelMargin($aMargin) { if( ERR_DEPRECATED ) JpGraphError::RaiseL(25056); $this->tick_label_margin=$aMargin; } function SetLabelMargin($aMargin) { $this->tick_label_margin=$aMargin; } function SetTextTicks($step,$start=0) { JpGraphError::RaiseL(25057); } function SetTextTickInterval($aStep,$aStart=0) { $this->scale->ticks->SetTextLabelStart($aStart); $this->tick_step=$aStep; } function SetTextLabelInterval($aStep,$aStart=0) { if( $aStep < 1 ) JpGraphError::RaiseL(25058); $this->scale->ticks->SetTextLabelStart($aStart); $this->label_step=$aStep; } function SetLabelPos($aSidePos) { if( ERR_DEPRECATED ) JpGraphError::RaiseL(25059); $this->labelPos=$aSidePos; } function SetLabelSide($aSidePos) { $this->labelPos=$aSidePos; } function SetFont($aFamily,$aStyle=FS_NORMAL,$aSize=10) { $this->font_family = $aFamily; $this->font_style = $aStyle; $this->font_size = $aSize; } function SetPos($aPosOnOtherScale) { $this->pos=$aPosOnOtherScale; } function SetPosAbsDelta($aDelta) { $this->iDeltaAbsPos=$aDelta; } function SetLabelAngle($aAngle) { $this->label_angle = $aAngle; } function Stroke($aOtherAxisScale,$aStrokeLabels=true) { if( $this->hide ) return; if( is_numeric($this->pos) ) { $pos=$aOtherAxisScale->Translate($this->pos); } else { if( ($aOtherAxisScale->GetMinVal() >= 0 && $this->pos==false) || $this->pos=="min" ) { $pos = $aOtherAxisScale->scale_abs[0]; } elseif($this->pos == "max") { $pos = $aOtherAxisScale->scale_abs[1]; } else { $this->pos=0; $pos=$aOtherAxisScale->Translate(0); } } $pos += $this->iDeltaAbsPos; $this->img->SetLineWeight($this->weight); $this->img->SetColor($this->color); $this->img->SetFont($this->font_family,$this->font_style,$this->font_size); if( $this->scale->type == "x" ) { if( !$this->hide_line ) $this->img->FilledRectangle($this->img->left_margin,$pos, $this->img->width-$this->img->right_margin,$pos+$this->weight-1); if( $this->title_side == SIDE_DOWN ) { $y = $pos + $this->img->GetFontHeight() + $this->title_margin + $this->title->margin; $yalign = 'top'; } else { $y = $pos - $this->img->GetFontHeight() - $this->title_margin - $this->title->margin; $yalign = 'bottom'; } if( $this->title_adjust=="high" ) $this->title->Pos($this->img->width-$this->img->right_margin,$y,"right",$yalign); elseif( $this->title_adjust=="middle" || $this->title_adjust=="center" ) $this->title->Pos(($this->img->width-$this->img->left_margin-$this->img->right_margin)/2+$this->img->left_margin,$y,"center",$yalign); elseif($this->title_adjust=="low") $this->title->Pos($this->img->left_margin,$y,"left",$yalign); else { JpGraphError::RaiseL(25060,$this->title_adjust); } } elseif( $this->scale->type == "y" ) { if( !$this->hide_line ) $this->img->FilledRectangle($pos-$this->weight+1,$this->img->top_margin, $pos,$this->img->height-$this->img->bottom_margin+$this->weight-1); $x=$pos ; if( $this->title_side == SIDE_LEFT ) { $x -= $this->title_margin; $x -= $this->title->margin; $halign="right"; } else { $x += $this->title_margin; $x += $this->title->margin; $halign="left"; } if( $this->title->halign != 'left' ) $halign = $this->title->halign; if( $this->title_adjust=="high" ) $this->title->Pos($x,$this->img->top_margin,$halign,"top"); elseif($this->title_adjust=="middle" || $this->title_adjust=="center") $this->title->Pos($x,($this->img->height-$this->img->top_margin-$this->img->bottom_margin)/2+$this->img->top_margin,$halign,"center"); elseif($this->title_adjust=="low") $this->title->Pos($x,$this->img->height-$this->img->bottom_margin,$halign,"bottom"); else JpGraphError::RaiseL(25061,$this->title_adjust); } $this->scale->ticks->Stroke($this->img,$this->scale,$pos); if( $aStrokeLabels ) { if( !$this->hide_labels ) $this->StrokeLabels($pos); $this->title->Stroke($this->img); } } function StrokeLabels($aPos,$aMinor=false,$aAbsLabel=false) { $this->img->SetColor($this->label_color); $this->img->SetFont($this->font_family,$this->font_style,$this->font_size); $yoff=$this->img->GetFontHeight()/2; $nbr = count($this->scale->ticks->maj_ticks_label); $i = $this->show_first_label ? 0 : 1 ; if( !$this->show_last_label ) --$nbr; $ncolor=0; if( isset($this->ticks_label_colors) ) $ncolor=count($this->ticks_label_colors); while( $i<$nbr ) { $tpos=$this->scale->ticks->maj_ticklabels_pos[$i]; if( $this->scale->type=="x" && $tpos > $this->img->width-$this->img->right_margin+1 ) { return; } if( ($i % $this->label_step)==0 ) { if( $ncolor > 0 ) $this->img->SetColor($this->ticks_label_colors[$i % $ncolor]); $m=$this->scale->ticks->GetMajor(); if( isset($this->ticks_label[$i*$m]) ) $label=$this->ticks_label[$i*$m]; else { if( $aAbsLabel ) $label=abs($this->scale->ticks->maj_ticks_label[$i]); else $label=$this->scale->ticks->maj_ticks_label[$i]; if( $this->scale->textscale && $this->scale->ticks->label_formfunc == '' ) { ++$label; } } if( $this->scale->type == "x" ) { if( $this->labelPos == SIDE_DOWN ) { if( $this->label_angle==0 || $this->label_angle==90 ) { if( $this->label_halign=='' && $this->label_valign=='') $this->img->SetTextAlign('center','top'); else $this->img->SetTextAlign($this->label_halign,$this->label_valign); } else { if( $this->label_halign=='' && $this->label_valign=='') $this->img->SetTextAlign("right","top"); else $this->img->SetTextAlign($this->label_halign,$this->label_valign); } $this->img->StrokeText($tpos,$aPos+$this->tick_label_margin+1,$label, $this->label_angle,$this->label_para_align); } else { if( $this->label_angle==0 || $this->label_angle==90 ) { if( $this->label_halign=='' && $this->label_valign=='') $this->img->SetTextAlign("center","bottom"); else $this->img->SetTextAlign($this->label_halign,$this->label_valign); } else { if( $this->label_halign=='' && $this->label_valign=='') $this->img->SetTextAlign("right","bottom"); else $this->img->SetTextAlign($this->label_halign,$this->label_valign); } $this->img->StrokeText($tpos,$aPos-$this->tick_label_margin-1,$label, $this->label_angle,$this->label_para_align); } } else { if( $this->labelPos == SIDE_LEFT ) { if( $this->label_halign=='' && $this->label_valign=='') $this->img->SetTextAlign("right","center"); else $this->img->SetTextAlign($this->label_halign,$this->label_valign); $this->img->StrokeText($aPos-$this->tick_label_margin,$tpos,$label,$this->label_angle,$this->label_para_align); } else { if( $this->label_halign=='' && $this->label_valign=='') $this->img->SetTextAlign("left","center"); else $this->img->SetTextAlign($this->label_halign,$this->label_valign); $this->img->StrokeText($aPos+$this->tick_label_margin,$tpos,$label,$this->label_angle,$this->label_para_align); } } } ++$i; } } } class Ticks { var $minor_abs_size=3, $major_abs_size=5; var $direction=1; var $scale; var $is_set=false; var $precision; var $supress_zerolabel=false,$supress_first=false; var $supress_last=false,$supress_tickmarks=false,$supress_minor_tickmarks=false; var $mincolor="",$majcolor=""; var $weight=1; var $label_formatstr=''; var $label_formfunc=''; var $label_dateformatstr=''; var $label_usedateformat=FALSE; function Ticks(&$aScale) { $this->scale=&$aScale; $this->precision = -1; } function SetLabelFormat($aFormatString,$aDate=FALSE) { $this->label_formatstr=$aFormatString; $this->label_usedateformat=$aDate; } function SetLabelDateFormat($aFormatString) { $this->label_dateformatstr=$aFormatString; } function SetFormatCallback($aCallbackFuncName) { $this->label_formfunc = $aCallbackFuncName; } function SupressZeroLabel($aFlag=true) { $this->supress_zerolabel=$aFlag; } function SupressMinorTickMarks($aHide=true) { $this->supress_minor_tickmarks=$aHide; } function SupressTickMarks($aHide=true) { $this->supress_tickmarks=$aHide; } function SupressFirst($aHide=true) { $this->supress_first=$aHide; } function SupressLast($aHide=true) { $this->supress_last=$aHide; } function GetMinTickAbsSize() { return $this->minor_abs_size; } function GetMajTickAbsSize() { return $this->major_abs_size; } function SetSize($aMajSize,$aMinSize=3) { $this->major_abs_size = $aMajSize; $this->minor_abs_size = $aMinSize; } function IsSpecified() { return $this->is_set; } function Set($aMaj,$aMin) { } function SetPrecision($aPrecision) { if( ERR_DEPRECATED ) JpGraphError::RaiseL(25063); $this->precision=$aPrecision; } function SetSide($aSide) { $this->direction=$aSide; } function SetDirection($aSide=SIDE_RIGHT) { $this->direction=$aSide; } function SetMarkColor($aMajorColor,$aMinorColor="") { $this->SetColor($aMajorColor,$aMinorColor); } function SetColor($aMajorColor,$aMinorColor="") { $this->majcolor=$aMajorColor; if( $aMinorColor=="" ) $this->mincolor=$aMajorColor; else $this->mincolor=$aMinorColor; } function SetWeight($aWeight) { $this->weight=$aWeight; } } class LinearTicks extends Ticks { var $minor_step=1, $major_step=2; var $xlabel_offset=0,$xtick_offset=0; var $label_offset=0; var $text_label_start=0; var $iManualTickPos = NULL, $iManualMinTickPos = NULL, $iManualTickLabels = NULL; var $maj_ticks_pos = array(), $maj_ticklabels_pos = array(), $ticks_pos = array(), $maj_ticks_label = array(); var $iAdjustForDST = false; function LinearTicks() { $this->precision = -1; } function GetMajor() { return $this->major_step; } function GetMinor() { return $this->minor_step; } function Set($aMajStep,$aMinStep=false) { if( $aMinStep==false ) $aMinStep=$aMajStep; if( $aMajStep <= 0 || $aMinStep <= 0 ) { JpGraphError::RaiseL(25064); } $this->major_step=$aMajStep; $this->minor_step=$aMinStep; $this->is_set = true; } function SetMajTickPositions($aMajPos,$aLabels=NULL) { $this->SetTickPositions($aMajPos,NULL,$aLabels); } function SetTickPositions($aMajPos,$aMinPos=NULL,$aLabels=NULL) { if( !is_array($aMajPos) || ($aMinPos!==NULL && !is_array($aMinPos)) ) { JpGraphError::RaiseL(25065); return; } $n=count($aMajPos); if( is_array($aLabels) && (count($aLabels) != $n) ) { JpGraphError::RaiseL(25066); return; } $this->iManualTickPos = $aMajPos; $this->iManualMinTickPos = $aMinPos; $this->iManualTickLabels = $aLabels; } function _doManualTickPos($aScale) { $n=count($this->iManualTickPos); $m=count($this->iManualMinTickPos); $doLbl=count($this->iManualTickLabels) > 0; $this->use_manualtickpos=true; $this->maj_ticks_pos = array(); $this->maj_ticklabels_pos = array(); $this->ticks_pos = array(); $minScale = $aScale->scale[0]; $maxScale = $aScale->scale[1]; $j=0; for($i=0; $i < $n ; ++$i ) { if( !isset($this->iManualTickPos[$i]) || $this->iManualTickPos[$i] < $minScale || $this->iManualTickPos[$i] > $maxScale) { continue; } $this->maj_ticks_pos[$j] = $aScale->Translate($this->iManualTickPos[$i]); $this->maj_ticklabels_pos[$j] = $this->maj_ticks_pos[$j]; if( $m <= 0 ) { $this->ticks_pos[$j] = $this->maj_ticks_pos[$j]; } if( $doLbl ) { $this->maj_ticks_label[$j] = $this->iManualTickLabels[$i]; } else { $this->maj_ticks_label[$j]=$this->_doLabelFormat($this->iManualTickPos[$i],$i,$n); } ++$j; } if( count($this->maj_ticks_pos) < 2 ) { JpGraphError::RaiseL(25067); } $j=0; for($i=0; $i < $m; ++$i ) { if( empty($this->iManualMinTickPos[$i]) || $this->iManualMinTickPos[$i] < $minScale || $this->iManualMinTickPos[$i] > $maxScale) continue; $this->ticks_pos[$j] = $aScale->Translate($this->iManualMinTickPos[$i]); ++$j; } } function _doAutoTickPos($aScale) { $maj_step_abs = $aScale->scale_factor*$this->major_step; $min_step_abs = $aScale->scale_factor*$this->minor_step; if( $min_step_abs==0 || $maj_step_abs==0 ) { JpGraphError::RaiseL(25068); } $limit = (int)$aScale->scale_abs[1]; if( $aScale->textscale ) { $label = (float)$aScale->GetMinVal()+$this->text_label_start+$this->label_offset; $start_abs=$aScale->scale_factor*$this->text_label_start; $nbrmajticks=round(($aScale->GetMaxVal()-$aScale->GetMinVal()-$this->text_label_start )/$this->major_step)+1; $x = $aScale->scale_abs[0]+$start_abs+$this->xlabel_offset*$min_step_abs; for( $i=0; $label <= $aScale->GetMaxVal()+$this->label_offset; ++$i ) { $this->maj_ticks_label[$i]=$this->_doLabelFormat($label,$i,$nbrmajticks); $label+=$this->major_step; $xtick=$aScale->scale_abs[0]+$start_abs+$this->xtick_offset*$min_step_abs+$i*$maj_step_abs; $this->maj_ticks_pos[$i]=$xtick; $this->maj_ticklabels_pos[$i] = round($x); $x += $maj_step_abs; } } else { $label = $aScale->GetMinVal(); $abs_pos = $aScale->scale_abs[0]; $j=0; $i=0; $step = round($maj_step_abs/$min_step_abs); if( $aScale->type == "x" ) { $nbrmajticks=round(($aScale->GetMaxVal()-$aScale->GetMinVal()-$this->text_label_start )/$this->major_step)+1; while( round($abs_pos) <= $limit ) { $this->ticks_pos[] = round($abs_pos); $this->ticks_label[] = $label; if( $i % $step == 0 && $j < $nbrmajticks ) { $this->maj_ticks_pos[$j] = round($abs_pos); $this->maj_ticklabels_pos[$j] = round($abs_pos); $this->maj_ticks_label[$j]=$this->_doLabelFormat($label,$j,$nbrmajticks); ++$j; } ++$i; $abs_pos += $min_step_abs; $label+=$this->minor_step; } } elseif( $aScale->type == "y" ) { $nbrmajticks=round(($aScale->GetMaxVal()-$aScale->GetMinVal())/$this->major_step)+1; while( round($abs_pos) >= $limit ) { $this->ticks_pos[$i] = round($abs_pos); $this->ticks_label[$i]=$label; if( $i % $step == 0 && $j < $nbrmajticks ) { $this->maj_ticks_pos[$j] = round($abs_pos); $this->maj_ticklabels_pos[$j] = round($abs_pos); $this->maj_ticks_label[$j]=$this->_doLabelFormat($label,$j,$nbrmajticks); ++$j; } ++$i; $abs_pos += $min_step_abs; $label += $this->minor_step; } } } } function AdjustForDST($aFlg=true) { $this->iAdjustForDST = $aFlg; } function _doLabelFormat($aVal,$aIdx,$aNbrTicks) { if( $this->precision==-1 ) { $t = log10($this->minor_step); if( $t > 0 ) $precision = 0; else $precision = -floor($t); } else $precision = $this->precision; if( $this->label_formfunc != '' ) { $f=$this->label_formfunc; $l = call_user_func($f,$aVal); } elseif( $this->label_formatstr != '' || $this->label_dateformatstr != '' ) { if( $this->label_usedateformat ) { if (date("I",$aVal)==1 && $this->iAdjustForDST ) $aVal+=3600; $l = date($this->label_formatstr,$aVal); if( $this->label_formatstr == 'W' ) { $l = 'w'.$l; } } else { if( $this->label_dateformatstr !== '' ) { if (date("I",$aVal)==1 && $this->iAdjustForDST ) $aVal+=3600; $l = date($this->label_dateformatstr,$aVal); if( $this->label_formatstr == 'W' ) { $l = 'w'.$l; } } else $l = sprintf($this->label_formatstr,$aVal); } } else { $l = sprintf('%01.'.$precision.'f',round($aVal,$precision)); } if( ($this->supress_zerolabel && $l==0) || ($this->supress_first && $aIdx==0) || ($this->supress_last && $aIdx==$aNbrTicks-1) ) { $l=''; } return $l; } function _StrokeTicks(&$aImg,$aScale,$aPos) { $hor = $aScale->type == 'x'; $aImg->SetLineWeight($this->weight); $limit = (int)$aScale->scale_abs[1]; if( !$aScale->textscale ) { $yu = $aPos - $this->direction*$this->GetMinTickAbsSize(); $xr = $aPos + $this->direction*$this->GetMinTickAbsSize(); $n = count($this->ticks_pos); for($i=0; $i < $n; ++$i ) { if( !$this->supress_tickmarks && !$this->supress_minor_tickmarks) { if( $this->mincolor!="" ) $aImg->PushColor($this->mincolor); if( $hor ) { $aImg->Line($this->ticks_pos[$i],$aPos,$this->ticks_pos[$i],$yu); } else { $aImg->Line($aPos,$this->ticks_pos[$i],$xr,$this->ticks_pos[$i]); } if( $this->mincolor!="" ) $aImg->PopColor(); } } } $yu = $aPos - $this->direction*$this->GetMajTickAbsSize(); $xr = $aPos + $this->direction*$this->GetMajTickAbsSize(); $nbrmajticks=round(($aScale->GetMaxVal()-$aScale->GetMinVal()-$this->text_label_start )/$this->major_step)+1; $n = count($this->maj_ticks_pos); for($i=0; $i < $n ; ++$i ) { if(!($this->xtick_offset > 0 && $i==$nbrmajticks-1) && !$this->supress_tickmarks) { if( $this->majcolor!="" ) $aImg->PushColor($this->majcolor); if( $hor ) { $aImg->Line($this->maj_ticks_pos[$i],$aPos,$this->maj_ticks_pos[$i],$yu); } else { $aImg->Line($aPos,$this->maj_ticks_pos[$i],$xr,$this->maj_ticks_pos[$i]); } if( $this->majcolor!="" ) $aImg->PopColor(); } } } function Stroke(&$aImg,$aScale,$aPos) { if( $this->iManualTickPos != NULL ) $this->_doManualTickPos($aScale); else $this->_doAutoTickPos($aScale); $this->_StrokeTicks($aImg,$aScale,$aPos, $aScale->type == 'x' ); } function SetXLabelOffset($aLabelOff,$aTickOff=-1) { $this->xlabel_offset=$aLabelOff; if( $aTickOff==-1 ) $this->xtick_offset=$aLabelOff; else $this->xtick_offset=$aTickOff; if( $aLabelOff>0 ) $this->SupressLast(); } function SetTextLabelStart($aTextLabelOff) { $this->text_label_start=$aTextLabelOff; } } class LinearScale { var $scale=array(0,0); var $scale_abs=array(0,0); var $scale_factor; var $world_size; var $world_abs_size; var $off; var $type; var $ticks=null; var $text_scale_off = 0; var $autoscale_min=false; var $autoscale_max=false; var $gracetop=0,$gracebottom=0; var $intscale=false; var $textscale=false; var $auto_ticks=false; var $name = 'lin'; function LinearScale($aMin=0,$aMax=0,$aType="y") { assert($aType=="x" || $aType=="y" ); assert($aMin<=$aMax); $this->type=$aType; $this->scale=array($aMin,$aMax); $this->world_size=$aMax-$aMin; $this->ticks = new LinearTicks(); } function IsSpecified() { if( $this->GetMinVal()==$this->GetMaxVal() ) { return false; } return true; } function SetAutoMin($aMin) { $this->autoscale_min=$aMin; } function SetAutoMax($aMax) { $this->autoscale_max=$aMax; } function SetAutoTicks($aFlag=true) { $this->auto_ticks = $aFlag; } function SetGrace($aGraceTop,$aGraceBottom=0) { if( $aGraceTop<0 || $aGraceBottom < 0 ) JpGraphError::RaiseL(25069); $this->gracetop=$aGraceTop; $this->gracebottom=$aGraceBottom; } function GetMinVal() { return $this->scale[0]; } function GetMaxVal() { return $this->scale[1]; } function Update(&$aImg,$aMin,$aMax) { $this->scale=array($aMin,$aMax); $this->world_size=$aMax-$aMin; $this->InitConstants($aImg); } function Translate($aCoord) { if( !is_numeric($aCoord) ) { if( $aCoord != '' && $aCoord != '-' && $aCoord != 'x' ) JpGraphError::RaiseL(25070); return 0; } else { return $this->off + ($aCoord - $this->scale[0])*$this->scale_factor; } } function RelTranslate($aCoord) { if( !is_numeric($aCoord) ) { if( $aCoord != '' && $aCoord != '-' && $aCoord != 'x' ) JpGraphError::RaiseL(25070); return 0; } else { return ($aCoord - $this->scale[0]) * $this->scale_factor; } } function SetIntScale($aIntScale=true) { $this->intscale=$aIntScale; } function IntAutoScale(&$img,$min,$max,$maxsteps,$majend=true) { $min=floor($min); $max=ceil($max); if( abs($min-$max)==0 ) { --$min; ++$max; } $maxsteps = floor($maxsteps); $gracetop=round(($this->gracetop/100.0)*abs($max-$min)); $gracebottom=round(($this->gracebottom/100.0)*abs($max-$min)); if( is_numeric($this->autoscale_min) ) { $min = ceil($this->autoscale_min); if( $min >= $max ) { JpGraphError::RaiseL(25071); } } if( is_numeric($this->autoscale_max) ) { $max = ceil($this->autoscale_max); if( $min >= $max ) { JpGraphError::RaiseL(25072); } } if( abs($min-$max ) == 0 ) { ++$max; --$min; } $min -= $gracebottom; $max += $gracetop; if( $majend ) { list($num1steps,$adj1min,$adj1max,$maj1step) = $this->IntCalcTicks($maxsteps,$min,$max,1); } else { $adj1min = $min; $adj1max = $max; list($num1steps,$maj1step) = $this->IntCalcTicksFreeze($maxsteps,$min,$max,1); } if( abs($min-$max) > 2 ) { if( $majend ) { list($num2steps,$adj2min,$adj2max,$maj2step) = $this->IntCalcTicks($maxsteps,$min,$max,5); } else { $adj2min = $min; $adj2max = $max; list($num2steps,$maj2step) = $this->IntCalcTicksFreeze($maxsteps,$min,$max,5); } } else { $num2steps = 10000; } if( abs($min-$max) > 5 ) { if( $majend ) { list($num5steps,$adj5min,$adj5max,$maj5step) = $this->IntCalcTicks($maxsteps,$min,$max,2); } else { $adj5min = $min; $adj5max = $max; list($num5steps,$maj5step) = $this->IntCalcTicksFreeze($maxsteps,$min,$max,2); } } else { $num5steps = 10000; } $match1=abs($num1steps-$maxsteps); $match2=abs($num2steps-$maxsteps); if( !empty($maj5step) && $maj5step > 1 ) $match5=abs($num5steps-$maxsteps); else $match5=10000; if( $match1 < $match2 ) { if( $match1 < $match5 ) $r=1; else $r=3; } else { if( $match2 < $match5 ) $r=2; else $r=3; } switch( $r ) { case 1: $this->ticks->Set($maj1step,$maj1step); $this->Update($img,$adj1min,$adj1max); break; case 2: $this->ticks->Set($maj2step,$maj2step); $this->Update($img,$adj2min,$adj2max); break; case 3: $this->ticks->Set($maj5step,$maj5step); $this->Update($img,$adj5min,$adj5max); break; default: JpGraphError::RaiseL(25073,$r); } } function AutoScale(&$img,$min,$max,$maxsteps,$majend=true) { if( $this->intscale ) { $this->IntAutoScale($img,$min,$max,$maxsteps,$majend); return; } if( abs($min-$max) < 0.00001 ) { if( $min==0 && $max==0 ) { $min=-1; $max=1; } else { $delta = (abs($max)+abs($min))*0.005; $min -= $delta; $max += $delta; } } $gracetop=($this->gracetop/100.0)*abs($max-$min); $gracebottom=($this->gracebottom/100.0)*abs($max-$min); if( is_numeric($this->autoscale_min) ) { $min = $this->autoscale_min; if( $min >= $max ) { JpGraphError::RaiseL(25071); } if( abs($min-$max ) < 0.00001 ) $max *= 1.2; } if( is_numeric($this->autoscale_max) ) { $max = $this->autoscale_max; if( $min >= $max ) { JpGraphError::RaiseL(25072); } if( abs($min-$max ) < 0.00001 ) $min *= 0.8; } $min -= $gracebottom; $max += $gracetop; if( $majend ) { list($num1steps,$adj1min,$adj1max,$min1step,$maj1step) = $this->CalcTicks($maxsteps,$min,$max,1,2); } else { $adj1min=$min; $adj1max=$max; list($num1steps,$min1step,$maj1step) = $this->CalcTicksFreeze($maxsteps,$min,$max,1,2,false); } if( $majend ) { list($num2steps,$adj2min,$adj2max,$min2step,$maj2step) = $this->CalcTicks($maxsteps,$min,$max,5,2); } else { $adj2min=$min; $adj2max=$max; list($num2steps,$min2step,$maj2step) = $this->CalcTicksFreeze($maxsteps,$min,$max,5,2,false); } if( $majend ) { list($num5steps,$adj5min,$adj5max,$min5step,$maj5step) = $this->CalcTicks($maxsteps,$min,$max,2,5); } else { $adj5min=$min; $adj5max=$max; list($num5steps,$min5step,$maj5step) = $this->CalcTicksFreeze($maxsteps,$min,$max,2,5,false); } $match1=abs($num1steps-$maxsteps); $match2=abs($num2steps-$maxsteps); $match5=abs($num5steps-$maxsteps); $r=$this->MatchMin3($match1,$match2,$match5,0.8); switch( $r ) { case 1: $this->Update($img,$adj1min,$adj1max); $this->ticks->Set($maj1step,$min1step); break; case 2: $this->Update($img,$adj2min,$adj2max); $this->ticks->Set($maj2step,$min2step); break; case 3: $this->Update($img,$adj5min,$adj5max); $this->ticks->Set($maj5step,$min5step); break; } } function InitConstants(&$img) { if( $this->type=="x" ) { $this->world_abs_size=$img->width - $img->left_margin - $img->right_margin; $this->off=$img->left_margin; $this->scale_factor = 0; if( $this->world_size > 0 ) $this->scale_factor=$this->world_abs_size/($this->world_size*1.0); } else { $this->world_abs_size=$img->height - $img->top_margin - $img->bottom_margin; $this->off=$img->top_margin+$this->world_abs_size; $this->scale_factor = 0; if( $this->world_size > 0 ) { $this->scale_factor=-$this->world_abs_size/($this->world_size*1.0); } } $size = $this->world_size * $this->scale_factor; $this->scale_abs=array($this->off,$this->off + $size); } function SetConstants($aStart,$aLen) { $this->world_abs_size=$aLen; $this->off=$aStart; if( $this->world_size<=0 ) { JpGraphError::RaiseL(25074); } $this->scale_factor=$this->world_abs_size/($this->world_size*1.0); $this->scale_abs=array($this->off,$this->off+$this->world_size*$this->scale_factor); } function CalcTicks($maxsteps,$min,$max,$a,$b,$majend=true) { $diff=$max-$min; if( $diff==0 ) $ld=0; else $ld=floor(log10($diff)); if( $min>0 && $min < pow(10,$ld) ) $min=0; $majstep=pow(10,$ld)/$a; $minstep=$majstep/$b; $adjmax=ceil($max/$minstep)*$minstep; $adjmin=floor($min/$minstep)*$minstep; $adjdiff = $adjmax-$adjmin; $numsteps=$adjdiff/$majstep; while( $numsteps>$maxsteps ) { $majstep=pow(10,$ld)/$a; $numsteps=$adjdiff/$majstep; ++$ld; } $minstep=$majstep/$b; $adjmin=floor($min/$minstep)*$minstep; $adjdiff = $adjmax-$adjmin; if( $majend ) { $adjmin = floor($min/$majstep)*$majstep; $adjdiff = $adjmax-$adjmin; $adjmax = ceil($adjdiff/$majstep)*$majstep+$adjmin; } else $adjmax=ceil($max/$minstep)*$minstep; return array($numsteps,$adjmin,$adjmax,$minstep,$majstep); } function CalcTicksFreeze($maxsteps,$min,$max,$a,$b) { $diff=$max-$min; if( $diff==0 ) $ld=0; else $ld=floor(log10($diff)); $majstep=pow(10,$ld)/$a; $minstep=$majstep/$b; $numsteps=floor($diff/$majstep); while( $numsteps > $maxsteps ) { $majstep=pow(10,$ld)/$a; $numsteps=floor($diff/$majstep); ++$ld; } $minstep=$majstep/$b; return array($numsteps,$minstep,$majstep); } function IntCalcTicks($maxsteps,$min,$max,$a,$majend=true) { $diff=$max-$min; if( $diff==0 ) JpGraphError::RaiseL(25075); else $ld=floor(log10($diff)); if( $min>0 && $min < pow(10,$ld) ) $min=0; if( $ld == 0 ) $ld=1; if( $a == 1 ) $majstep = 1; else $majstep=pow(10,$ld)/$a; $adjmax=ceil($max/$majstep)*$majstep; $adjmin=floor($min/$majstep)*$majstep; $adjdiff = $adjmax-$adjmin; $numsteps=$adjdiff/$majstep; while( $numsteps>$maxsteps ) { $majstep=pow(10,$ld)/$a; $numsteps=$adjdiff/$majstep; ++$ld; } $adjmin=floor($min/$majstep)*$majstep; $adjdiff = $adjmax-$adjmin; if( $majend ) { $adjmin = floor($min/$majstep)*$majstep; $adjdiff = $adjmax-$adjmin; $adjmax = ceil($adjdiff/$majstep)*$majstep+$adjmin; } else $adjmax=ceil($max/$majstep)*$majstep; return array($numsteps,$adjmin,$adjmax,$majstep); } function IntCalcTicksFreeze($maxsteps,$min,$max,$a) { $diff=$max-$min; if( $diff==0 ) JpGraphError::RaiseL(25075); else $ld=floor(log10($diff)); if( $ld == 0 ) $ld=1; if( $a == 1 ) $majstep = 1; else $majstep=pow(10,$ld)/$a; $numsteps=floor($diff/$majstep); while( $numsteps > $maxsteps ) { $majstep=pow(10,$ld)/$a; $numsteps=floor($diff/$majstep); ++$ld; } return array($numsteps,$majstep); } function MatchMin3($a,$b,$c,$weight) { if( $a < $b ) { if( $a < ($c*$weight) ) return 1; else return 3; } elseif( $b < ($c*$weight) ) return 2; return 3; } } class ImgStreamCache { var $cache_dir; var $img=null; var $timeout=0; function ImgStreamCache(&$aImg, $aCacheDir=CACHE_DIR) { $this->img = &$aImg; $this->cache_dir = $aCacheDir; } function SetTimeout($aTimeout) { $this->timeout=$aTimeout; } function PutAndStream(&$aImage,$aCacheFileName,$aInline,$aStrokeFileName) { GLOBAL $gJpgBrandTiming; if( $gJpgBrandTiming ) { global $tim; $t=$tim->Pop()/1000.0; $c=$aImage->SetColor("black"); $t=sprintf(BRAND_TIME_FORMAT,round($t,3)); imagestring($this->img->img,2,5,$this->img->height-20,$t,$c); } if( _FORCE_IMGTOFILE ) { $aStrokeFileName = _FORCE_IMGDIR.GenImgName(); } if( $aStrokeFileName!="" ) { if( $aStrokeFileName == "auto" ) $aStrokeFileName = GenImgName(); if( file_exists($aStrokeFileName) ) { if( !@unlink($aStrokeFileName) ) JpGraphError::RaiseL(25111,$aStrokeFileName); } $aImage->Stream($aStrokeFileName); return; } if( $aCacheFileName != "" && USE_CACHE) { $aCacheFileName = $this->cache_dir . $aCacheFileName; if( file_exists($aCacheFileName) ) { if( !$aInline ) { $diff=time()-filemtime($aCacheFileName); if( $diff < 0 ) JpGraphError::RaiseL(25112,$aCacheFileName); if( $this->timeout>0 && ($diff <= $this->timeout*60) ) return; } if( !@unlink($aCacheFileName) ) JpGraphError::RaiseL(25113,$aStrokeFileName); $aImage->Stream($aCacheFileName); } else { $this->MakeDirs(dirname($aCacheFileName)); if( !is_writeable(dirname($aCacheFileName)) ) { JpGraphError::RaiseL(25114,$aCacheFileName); } $aImage->Stream($aCacheFileName); } $res=true; if( CACHE_FILE_GROUP != "" ) $res = @chgrp($aCacheFileName,CACHE_FILE_GROUP); if( CACHE_FILE_MOD != "" ) $res = @chmod($aCacheFileName,CACHE_FILE_MOD); if( !$res ) JpGraphError::RaiseL(25115,$aStrokeFileName); $aImage->Destroy(); if( $aInline ) { if ($fh = @fopen($aCacheFileName, "rb") ) { $this->img->Headers(); fpassthru($fh); return; } else JpGraphError::RaiseL(25116,$aFile); } } elseif( $aInline ) { $this->img->Headers(); $aImage->Stream(); return; } } function GetAndStream($aCacheFileName) { $aCacheFileName = $this->cache_dir.$aCacheFileName; if ( USE_CACHE && file_exists($aCacheFileName) && $this->timeout>=0 ) { $diff=time()-filemtime($aCacheFileName); if( $this->timeout>0 && ($diff > $this->timeout*60) ) { return false; } else { if ($fh = @fopen($aCacheFileName, "rb")) { $this->img->Headers(); fpassthru($fh); return true; } else JpGraphError::RaiseL(25117,$aCacheFileName); } } return false; } function MakeDirs($aFile) { $dirs = array(); while ( !(file_exists($aFile)) ) { $dirs[] = $aFile; $aFile = dirname($aFile); } for ($i = sizeof($dirs)-1; $i>=0; $i--) { if(! @mkdir($dirs[$i],0777) ) JpGraphError::RaiseL(25118,$aFile); if( CACHE_FILE_GROUP != "" ) { $res=true; $res =@chgrp($dirs[$i],CACHE_FILE_GROUP); $res &= @chmod($dirs[$i],0777); if( !$res ) JpGraphError::RaiseL(25119,$aFile); } } return true; } } DEFINE('_DEFAULT_LPM_SIZE',8); class Legend { var $color=array(0,0,0); var $fill_color=array(235,235,235); var $shadow=true; var $shadow_color='gray'; var $txtcol=array(); var $mark_abs_hsize=_DEFAULT_LPM_SIZE, $mark_abs_vsize=_DEFAULT_LPM_SIZE; var $xmargin=10,$ymargin=3,$shadow_width=2; var $xlmargin=2, $ylmargin=''; var $xpos=0.05, $ypos=0.15, $xabspos=-1, $yabspos=-1; var $halign="right", $valign="top"; var $font_family=FF_FONT1,$font_style=FS_NORMAL,$font_size=10; var $font_color='black'; var $hide=false,$layout_n=1; var $weight=1,$frameweight=1; var $csimareas=''; var $reverse = false ; function Legend() { } function Hide($aHide=true) { $this->hide=$aHide; } function SetHColMargin($aXMarg) { $this->xmargin = $aXMarg; } function SetVColMargin($aSpacing) { $this->ymargin = $aSpacing ; } function SetLeftMargin($aXMarg) { $this->xlmargin = $aXMarg; } function SetLineSpacing($aSpacing) { $this->ymargin = $aSpacing ; } function SetShadow($aShow='gray',$aWidth=2) { if( is_string($aShow) ) { $this->shadow_color = $aShow; $this->shadow=true; } else $this->shadow=$aShow; $this->shadow_width=$aWidth; } function SetMarkAbsSize($aSize) { $this->mark_abs_vsize = $aSize ; $this->mark_abs_hsize = $aSize ; } function SetMarkAbsVSize($aSize) { $this->mark_abs_vsize = $aSize ; } function SetMarkAbsHSize($aSize) { $this->mark_abs_hsize = $aSize ; } function SetLineWeight($aWeight) { $this->weight = $aWeight; } function SetFrameWeight($aWeight) { $this->frameweight = $aWeight; } function SetLayout($aDirection=LEGEND_VERT) { $this->layout_n = $aDirection==LEGEND_VERT ? 1 : 99 ; } function SetColumns($aCols) { $this->layout_n = $aCols ; } function SetReverse($f=true) { $this->reverse = $f ; } function SetColor($aFontColor,$aColor='black') { $this->font_color=$aFontColor; $this->color=$aColor; } function SetFont($aFamily,$aStyle=FS_NORMAL,$aSize=10) { $this->font_family = $aFamily; $this->font_style = $aStyle; $this->font_size = $aSize; } function SetPos($aX,$aY,$aHAlign="right",$aVAlign="top") { $this->Pos($aX,$aY,$aHAlign,$aVAlign); } function SetAbsPos($aX,$aY,$aHAlign="right",$aVAlign="top") { $this->xabspos=$aX; $this->yabspos=$aY; $this->halign=$aHAlign; $this->valign=$aVAlign; } function Pos($aX,$aY,$aHAlign="right",$aVAlign="top") { if( !($aX<1 && $aY<1) ) JpGraphError::RaiseL(25120); $this->xpos=$aX; $this->ypos=$aY; $this->halign=$aHAlign; $this->valign=$aVAlign; } function SetFillColor($aColor) { $this->fill_color=$aColor; } function Add($aTxt,$aColor,$aPlotmark="",$aLinestyle=0,$csimtarget="",$csimalt="") { $this->txtcol[]=array($aTxt,$aColor,$aPlotmark,$aLinestyle,$csimtarget,$csimalt); } function GetCSIMAreas() { return $this->csimareas; } function Stroke(&$aImg) { $fillBoxFrameWeight=1; if( $this->hide ) return; $aImg->SetFont($this->font_family,$this->font_style,$this->font_size); if( $this->reverse ) { $this->txtcol = array_reverse($this->txtcol); } $n=count($this->txtcol); if( $n == 0 ) return; $numcolumns = ($n > $this->layout_n ? $this->layout_n : $n); for( $i=0; $i < $numcolumns; ++$i ) { $colwidth[$i] = $aImg->GetTextWidth($this->txtcol[$i][0]) + 2*$this->xmargin + 2*$this->mark_abs_hsize; $colheight[$i] = 0; } $rows = 0 ; $rowheight[0] = 0; for( $i=0; $i < $n; ++$i ) { $h = max($this->mark_abs_vsize,$aImg->GetTextHeight($this->txtcol[$i][0]))+$this->ymargin; if( $i % $numcolumns == 0 ) { $rows++; $rowheight[$rows-1] = 0; } $rowheight[$rows-1] = max($rowheight[$rows-1],$h); } $abs_height = 0; for( $i=0; $i < $rows; ++$i ) { $abs_height += $rowheight[$i] ; } $abs_height = max($abs_height,$this->mark_abs_vsize); $abs_height += $this->ymargin+3; for( $i=$numcolumns; $i < $n; ++$i ) { $colwidth[$i % $numcolumns] = max( $aImg->GetTextWidth($this->txtcol[$i][0])+2*$this->xmargin+2*$this->mark_abs_hsize,$colwidth[$i % $numcolumns]); } $mtw = 0; for( $i=0; $i < $numcolumns; ++$i ) { $mtw += $colwidth[$i] ; } $abs_width = $mtw+$this->xlmargin; if( $this->xabspos === -1 && $this->yabspos === -1 ) { $this->xabspos = $this->xpos*$aImg->width ; $this->yabspos = $this->ypos*$aImg->height ; } if( $this->halign=="left" ) $xp = $this->xabspos; elseif( $this->halign=="center" ) $xp = $this->xabspos - $abs_width/2; else $xp = $aImg->width - $this->xabspos - $abs_width; $yp=$this->yabspos; if( $this->valign=="center" ) $yp-=$abs_height/2; elseif( $this->valign=="bottom" ) $yp-=$abs_height; $aImg->SetColor($this->color); $aImg->SetLineWeight($this->frameweight); $aImg->SetLineStyle('solid'); if( $this->shadow ) $aImg->ShadowRectangle($xp,$yp,$xp+$abs_width+$this->shadow_width, $yp+$abs_height+$this->shadow_width, $this->fill_color,$this->shadow_width,$this->shadow_color); else { $aImg->SetColor($this->fill_color); $aImg->FilledRectangle($xp,$yp,$xp+$abs_width,$yp+$abs_height); $aImg->SetColor($this->color); $aImg->Rectangle($xp,$yp,$xp+$abs_width,$yp+$abs_height); } $x1=$xp+$this->mark_abs_hsize+$this->xlmargin; $y1=$yp + $this->ymargin; $f2 = round($aImg->GetTextHeight('X')/2); $grad = new Gradient($aImg); $patternFactory = null; $i = 1 ; $row = 0; foreach($this->txtcol as $p) { if( _JPG_DEBUG ) { $aImg->SetLineWeight(1); $aImg->SetColor('red'); $aImg->SetLineStyle('solid'); $aImg->Rectangle($xp,$y1,$xp+$abs_width,$y1+$rowheight[$row]); } $aImg->SetLineWeight($this->weight); $x1 = round($x1); $y1=round($y1); if ( $p[2] && $p[2]->GetType() > -1 ) { $aImg->SetColor($p[1]); if( is_string($p[3]) || $p[3]>0 ) { $aImg->SetLineStyle($p[3]); $aImg->StyleLine($x1-$this->mark_abs_hsize,$y1+$f2,$x1+$this->mark_abs_hsize,$y1+$f2); } if( $p[2]->GetType() != MARK_IMG ) { $p[2]->iFormatCallback = ''; $p[2]->iFormatCallback2 = ''; if( $p[2]->GetType() == MARK_FILLEDCIRCLE || $p[2]->GetType() == MARK_CIRCLE ) { $p[2]->SetSize(min($this->mark_abs_vsize,$this->mark_abs_hsize)/2); $p[2]->Stroke($aImg,$x1,$y1+$f2); } else { $p[2]->SetSize(min($this->mark_abs_vsize,$this->mark_abs_hsize)); $p[2]->Stroke($aImg,$x1,$y1+$f2); } } } elseif ( $p[2] && (is_string($p[3]) || $p[3]>0 ) ) { $aImg->SetColor($p[1]); $aImg->SetLineStyle($p[3]); $aImg->StyleLine($x1-1,$y1+$f2,$x1+$this->mark_abs_hsize,$y1+$f2); $aImg->StyleLine($x1-1,$y1+$f2+1,$x1+$this->mark_abs_hsize,$y1+$f2+1); } else { $color = $p[1] ; $boxsize = min($this->mark_abs_vsize,$this->mark_abs_hsize) + 2 ; $ym = round($y1 + $f2 - $boxsize/2); if( $p[3] < -100 ) { if( $patternFactory == null ) { $patternFactory = new RectPatternFactory(); } $prect = $patternFactory->Create($p[1][0],$p[1][1],1); $prect->SetBackground($p[1][3]); $prect->SetDensity($p[1][2]+1); $prect->SetPos(new Rectangle($x1,$ym,$boxsize,$boxsize)); $prect->Stroke($aImg); $prect=null; } else { if( is_array($color) && count($color)==2 ) { $grad->FilledRectangle($x1,$ym, $x1+$boxsize,$ym+$boxsize, $color[0],$color[1],-$p[3]); } else { $aImg->SetColor($p[1]); $aImg->FilledRectangle($x1,$ym,$x1+$boxsize,$ym+$boxsize); } $aImg->SetColor($this->color); $aImg->SetLineWeight($fillBoxFrameWeight); $aImg->Rectangle($x1,$ym,$x1+$boxsize,$ym+$boxsize); } } $aImg->SetColor($this->font_color); $aImg->SetFont($this->font_family,$this->font_style,$this->font_size); $aImg->SetTextAlign("left","top"); $aImg->StrokeText(round($x1+$this->mark_abs_hsize+$this->xmargin),$y1,$p[0]); if( $p[4] != "" ) { $xe = $x1 + $this->xmargin+$this->mark_abs_hsize+$aImg->GetTextWidth($p[0]); $ye = $y1 + max($this->mark_abs_vsize,$aImg->GetTextHeight($p[0])); $coords = "$x1,$y1,$xe,$y1,$xe,$ye,$x1,$ye"; if( ! empty($p[4]) ) { $this->csimareas .= "<area shape=\"poly\" coords=\"$coords\" href=\"".htmlentities($p[4])."\""; if( !empty($p[5]) ) { $tmp=sprintf($p[5],$p[0]); $this->csimareas .= " title=\"$tmp\""; } $this->csimareas .= " alt=\"\" />\n"; } } if( $i >= $this->layout_n ) { $x1 = $xp+$this->mark_abs_hsize+$this->xlmargin; $y1 += $rowheight[$row++]; $i = 1; } else { $x1 += $colwidth[($i-1) % $numcolumns] ; ++$i; } } } } class DisplayValue { var $show=false,$format="%.1f",$negformat=""; var $iFormCallback=''; var $angle=0; var $ff=FF_FONT1,$fs=FS_NORMAL,$fsize=10; var $color="navy",$negcolor=""; var $margin=5,$valign="",$halign="center"; var $iHideZero=false; function Show($aFlag=true) { $this->show=$aFlag; } function SetColor($aColor,$aNegcolor="") { $this->color = $aColor; $this->negcolor = $aNegcolor; } function SetFont($aFontFamily,$aFontStyle=FS_NORMAL,$aFontSize=10) { $this->ff=$aFontFamily; $this->fs=$aFontStyle; $this->fsize=$aFontSize; } function SetMargin($aMargin) { $this->margin = $aMargin; } function SetAngle($aAngle) { $this->angle = $aAngle; } function SetAlign($aHAlign,$aVAlign='') { $this->halign = $aHAlign; $this->valign = $aVAlign; } function SetFormat($aFormat,$aNegFormat="") { $this->format= $aFormat; $this->negformat= $aNegFormat; } function SetFormatCallback($aFunc) { $this->iFormCallback = $aFunc; } function HideZero($aFlag=true) { $this->iHideZero=$aFlag; } function Stroke(&$img,$aVal,$x,$y) { if( $this->show ) { if( $this->negformat=="" ) $this->negformat=$this->format; if( $this->negcolor=="" ) $this->negcolor=$this->color; if( $aVal===NULL || (is_string($aVal) && ($aVal=="" || $aVal=="-" || $aVal=="x" ) ) ) return; if( is_numeric($aVal) && $aVal==0 && $this->iHideZero ) { return; } if( $this->iFormCallback != '' ) { $f = $this->iFormCallback; $sval = call_user_func($f,$aVal); } elseif( is_numeric($aVal) ) { if( $aVal >= 0 ) $sval=sprintf($this->format,$aVal); else $sval=sprintf($this->negformat,$aVal); } else $sval=$aVal; $y = $y-sign($aVal)*$this->margin; $txt = new Text($sval,$x,$y); $txt->SetFont($this->ff,$this->fs,$this->fsize); if( $this->valign == "" ) { if( $aVal >= 0 ) $valign = "bottom"; else $valign = "top"; } else $valign = $this->valign; $txt->Align($this->halign,$valign); $txt->SetOrientation($this->angle); if( $aVal > 0 ) $txt->SetColor($this->color); else $txt->SetColor($this->negcolor); $txt->Stroke($img); } } } class Plot { var $line_weight=1; var $coords=array(); var $legend='',$hidelegend=false; var $csimtargets=array(); var $csimareas=""; var $csimalts=null; var $color="black"; var $numpoints=0; var $weight=1; var $value; var $center=false; var $legendcsimtarget=''; var $legendcsimalt=''; function Plot(&$aDatay,$aDatax=false) { $this->numpoints = count($aDatay); if( $this->numpoints==0 ) JpGraphError::RaiseL(25121); $this->coords[0]=$aDatay; if( is_array($aDatax) ) { $this->coords[1]=$aDatax; $n = count($aDatax); for($i=0; $i < $n; ++$i ) { if( !is_numeric($aDatax[$i])) { JpGraphError::RaiseL(25070); } } } $this->value = new DisplayValue(); } function Stroke(&$aImg,&$aXScale,&$aYScale) { JpGraphError::RaiseL(25122); } function HideLegend($f=true) { $this->hidelegend = $f; } function DoLegend(&$graph) { if( !$this->hidelegend ) $this->Legend($graph); } function StrokeDataValue($img,$aVal,$x,$y) { $this->value->Stroke($img,$aVal,$x,$y); } function SetCSIMTargets($aTargets,$aAlts=null) { $this->csimtargets=$aTargets; $this->csimalts=$aAlts; } function GetCSIMareas() { return $this->csimareas; } function PreStrokeAdjust(&$aGraph) { if( substr($aGraph->axtype,0,4) == "text" && (isset($this->coords[1])) ) JpGraphError::RaiseL(25123); return true; } function Min() { if( isset($this->coords[1]) ) $x=$this->coords[1]; else $x=""; if( $x != "" && count($x) > 0 ) { $xm=min($x); } else $xm=0; $y=$this->coords[0]; $cnt = count($y); if( $cnt > 0 ) { $i=0; while( $i<$cnt && !is_numeric($ym=$y[$i]) ) $i++; while( $i < $cnt) { if( is_numeric($y[$i]) ) $ym=min($ym,$y[$i]); ++$i; } } else $ym=""; return array($xm,$ym); } function Max() { if( isset($this->coords[1]) ) $x=$this->coords[1]; else $x=""; if( $x!="" && count($x) > 0 ) $xm=max($x); else { $xm = $this->numpoints-1; } $y=$this->coords[0]; if( count($y) > 0 ) { $cnt = count($y); $i=0; while( $i<$cnt && !is_numeric($ym=$y[$i]) ) $i++; while( $i < $cnt ) { if( is_numeric($y[$i]) ) $ym=max($ym,$y[$i]); ++$i; } } else $ym=""; return array($xm,$ym); } function SetColor($aColor) { $this->color=$aColor; } function SetLegend($aLegend,$aCSIM="",$aCSIMAlt="") { $this->legend = $aLegend; $this->legendcsimtarget = $aCSIM; $this->legendcsimalt = $aCSIMAlt; } function SetWeight($aWeight) { $this->weight=$aWeight; } function SetLineWeight($aWeight=1) { $this->line_weight=$aWeight; } function SetCenter($aCenter=true) { $this->center = $aCenter; } function StrokeMargin(&$aImg) { return true; } function Legend(&$aGraph) { if( $this->legend != "" ) $aGraph->legend->Add($this->legend,$this->color,"",0,$this->legendcsimtarget,$this->legendcsimalt); } } class PlotLine { var $weight=1; var $color="black"; var $direction=-1; var $scaleposition; var $legend='',$hidelegend=false, $legendcsimtarget='', $legendcsimalt=''; function PlotLine($aDir=HORIZONTAL,$aPos=0,$aColor="black",$aWeight=1) { $this->direction = $aDir; $this->color=$aColor; $this->weight=$aWeight; $this->scaleposition=$aPos; } function SetLegend($aLegend,$aCSIM="",$aCSIMAlt="") { $this->legend = $aLegend; $this->legendcsimtarget = $aCSIM; $this->legendcsimalt = $aCSIMAlt; } function HideLegend($f=true) { $this->hidelegend = $f; } function SetPosition($aScalePosition) { $this->scaleposition=$aScalePosition; } function SetDirection($aDir) { $this->direction = $aDir; } function SetColor($aColor) { $this->color=$aColor; } function SetWeight($aWeight) { $this->weight=$aWeight; } function DoLegend(&$graph) { if( !$this->hidelegend ) $this->Legend($graph); } function Legend(&$aGraph) { if( $this->legend != "" ) { $dummyPlotMark = new PlotMark(); $lineStyle = 1; $aGraph->legend->Add($this->legend,$this->color,$dummyPlotMark,$lineStyle, $this->legendcsimtarget,$this->legendcsimalt); } } function PreStrokeAdjust($aGraph) { } function Stroke(&$aImg,&$aXScale,&$aYScale) { $aImg->SetColor($this->color); $aImg->SetLineWeight($this->weight); if( $this->direction == VERTICAL ) { $ymin_abs=$aYScale->Translate($aYScale->GetMinVal()); $ymax_abs=$aYScale->Translate($aYScale->GetMaxVal()); $xpos_abs=$aXScale->Translate($this->scaleposition); $aImg->Line($xpos_abs, $ymin_abs, $xpos_abs, $ymax_abs); } elseif( $this->direction == HORIZONTAL ) { $xmin_abs=$aXScale->Translate($aXScale->GetMinVal()); $xmax_abs=$aXScale->Translate($aXScale->GetMaxVal()); $ypos_abs=$aYScale->Translate($this->scaleposition); $aImg->Line($xmin_abs, $ypos_abs, $xmax_abs, $ypos_abs); } else JpGraphError::RaiseL(25125); } } ?>
