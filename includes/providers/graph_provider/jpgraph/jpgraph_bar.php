<?php
 require_once('jpgraph_plotband.php'); DEFINE('PATTERN_DIAG1',1); DEFINE('PATTERN_DIAG2',2); DEFINE('PATTERN_DIAG3',3); DEFINE('PATTERN_DIAG4',4); DEFINE('PATTERN_CROSS1',5); DEFINE('PATTERN_CROSS2',6); DEFINE('PATTERN_CROSS3',7); DEFINE('PATTERN_CROSS4',8); DEFINE('PATTERN_STRIPE1',9); DEFINE('PATTERN_STRIPE2',10); class BarPlot extends Plot { var $width=0.4; var $abswidth=-1; var $fill=false,$fill_color="lightblue"; var $ybase=0; var $align="center"; var $grad=false,$grad_style=1; var $grad_fromcolor=array(50,50,200),$grad_tocolor=array(255,255,255); var $bar_shadow=false; var $bar_shadow_color="black"; var $bar_shadow_hsize=3,$bar_shadow_vsize=3; var $valuepos='top'; var $iPattern=-1,$iPatternDensity=80,$iPatternColor='black'; function BarPlot(&$datay,$datax=false) { $this->Plot($datay,$datax); ++$this->numpoints; } function SetShadow($color="black",$hsize=3,$vsize=3,$show=true) { $this->bar_shadow=$show; $this->bar_shadow_color=$color; $this->bar_shadow_vsize=$vsize; $this->bar_shadow_hsize=$hsize; $this->value->margin += $vsize; } function SetYMin($aYStartValue) { $this->ybase=$aYStartValue; } function SetYBase($aYStartValue) { $this->ybase=$aYStartValue; } function Legend(&$graph) { if( $this->grad && $this->legend!="" && !$this->fill ) { $color=array($this->grad_fromcolor,$this->grad_tocolor); $graph->legend->Add($this->legend,$color,"",-$this->grad_style, $this->legendcsimtarget,$this->legendcsimalt); } elseif( $this->legend!="" && ($this->iPattern > -1 || is_array($this->iPattern)) ) { if( is_array($this->iPattern) ) { $p1 = $this->iPattern[0]; $p2 = $this->iPatternColor[0]; $p3 = $this->iPatternDensity[0]; } else { $p1 = $this->iPattern; $p2 = $this->iPatternColor; $p3 = $this->iPatternDensity; } $color = array($p1,$p2,$p3,$this->fill_color); $graph->legend->Add($this->legend,$color,"",-101, $this->legendcsimtarget,$this->legendcsimalt); } elseif( $this->fill_color && $this->legend!="" ) { if( is_array($this->fill_color) ) { $graph->legend->Add($this->legend,$this->fill_color[0],"",0, $this->legendcsimtarget,$this->legendcsimalt); } else { $graph->legend->Add($this->legend,$this->fill_color,"",0, $this->legendcsimtarget,$this->legendcsimalt); } } } function PreStrokeAdjust(&$graph) { parent::PreStrokeAdjust($graph); if( substr($graph->axtype,-3,3)=="log" && $this->ybase==0 ) $this->ybase = $graph->yaxis->scale->GetMinVal(); if( substr($graph->axtype,0,3)=="tex" ) { $graph->xaxis->scale->ticks->SetXLabelOffset(0.5,0); if( $this->abswidth > -1 ) { $graph->SetTextScaleAbsCenterOff($this->abswidth); } else { if( $this->align == "center" ) $graph->SetTextScaleOff(0.5-$this->width/2); elseif( $this->align == "right" ) $graph->SetTextScaleOff(1-$this->width); } } } function Min() { $m = parent::Min(); if( $m[1] >= $this->ybase ) $m[1] = $this->ybase; return $m; } function Max() { $m = parent::Max(); if( $m[1] <= $this->ybase ) $m[1] = $this->ybase; return $m; } function SetWidth($aWidth) { if( $aWidth > 1 ) { $this->abswidth=$aWidth; } else $this->width=$aWidth; } function SetAbsWidth($aWidth) { $this->abswidth=$aWidth; } function SetAlign($aAlign) { $this->align=$aAlign; } function SetNoFill() { $this->grad = false; $this->fill_color=false; $this->fill=false; } function SetFillColor($aColor) { $this->fill = true ; $this->fill_color = $aColor; } function SetFillGradient($aFromColor,$aToColor=null,$aStyle=null) { $this->grad = true; $this->grad_fromcolor = $aFromColor; $this->grad_tocolor = $aToColor; $this->grad_style = $aStyle; } function SetValuePos($aPos) { $this->valuepos = $aPos; } function SetPattern($aPattern, $aColor='black'){ if( is_array($aPattern) ) { $n = count($aPattern); $this->iPattern = array(); $this->iPatternDensity = array(); if( is_array($aColor) ) { $this->iPatternColor = array(); if( count($aColor) != $n ) { JpGraphError::RaiseL(2001); } } else $this->iPatternColor = $aColor; for( $i=0; $i < $n; ++$i ) { $this->_SetPatternHelper($aPattern[$i], $this->iPattern[$i], $this->iPatternDensity[$i]); if( is_array($aColor) ) { $this->iPatternColor[$i] = $aColor[$i]; } } } else { $this->_SetPatternHelper($aPattern, $this->iPattern, $this->iPatternDensity); $this->iPatternColor = $aColor; } } function _SetPatternHelper($aPattern, &$aPatternValue, &$aDensity){ switch( $aPattern ) { case PATTERN_DIAG1: $aPatternValue= 1; $aDensity = 90; break; case PATTERN_DIAG2: $aPatternValue= 1; $aDensity = 75; break; case PATTERN_DIAG3: $aPatternValue= 2; $aDensity = 90; break; case PATTERN_DIAG4: $aPatternValue= 2; $aDensity = 75; break; case PATTERN_CROSS1: $aPatternValue= 8; $aDensity = 90; break; case PATTERN_CROSS2: $aPatternValue= 8; $aDensity = 78; break; case PATTERN_CROSS3: $aPatternValue= 8; $aDensity = 65; break; case PATTERN_CROSS4: $aPatternValue= 7; $aDensity = 90; break; case PATTERN_STRIPE1: $aPatternValue= 5; $aDensity = 95; break; case PATTERN_STRIPE2: $aPatternValue= 5; $aDensity = 85; break; default: JpGraphError::RaiseL(2002); } } function Stroke(&$img,&$xscale,&$yscale) { $numpoints = count($this->coords[0]); if( isset($this->coords[1]) ) { if( count($this->coords[1])!=$numpoints ) JpGraphError::RaiseL(2003,count($this->coords[1]),$numpoints); else $exist_x = true; } else $exist_x = false; $numbars=count($this->coords[0]); if( $yscale->GetMinVal() >= 0 ) $zp=$yscale->scale_abs[0]; else { $zp=$yscale->Translate(0); } if( $this->abswidth > -1 ) { $abswidth=$this->abswidth; } else $abswidth=round($this->width*$xscale->scale_factor,0); if( is_array($this->iPattern) ) { $np = count($this->iPattern); } $grad = null; for($i=0; $i < $numbars; ++$i) { if ($this->coords[0][$i] === null || $this->coords[0][$i] === '' ) continue; if( $exist_x ) $x=$this->coords[1][$i]; else $x=$i; $x=$xscale->Translate($x); $pts=array( $x,$zp, $x,$yscale->Translate($this->coords[0][$i]), $x+$abswidth,$yscale->Translate($this->coords[0][$i]), $x+$abswidth,$zp); if( $this->grad ) { if( $grad === null ) $grad = new Gradient($img); if( is_array($this->grad_fromcolor) ) { $ng = count($this->grad_fromcolor); if( $ng === 3 ) { if( is_numeric($this->grad_fromcolor[0]) && $this->grad_fromcolor[0] > 0 && $this->grad_fromcolor[0] < 256 ) { $fromcolor = $this->grad_fromcolor; $tocolor = $this->grad_tocolor; $style = $this->grad_style; } } else { $fromcolor = $this->grad_fromcolor[$i % $ng][0]; $tocolor = $this->grad_fromcolor[$i % $ng][1]; $style = $this->grad_fromcolor[$i % $ng][2]; } $grad->FilledRectangle($pts[2],$pts[3], $pts[6],$pts[7], $fromcolor,$tocolor,$style); } else { $grad->FilledRectangle($pts[2],$pts[3], $pts[6],$pts[7], $this->grad_fromcolor,$this->grad_tocolor,$this->grad_style); } } elseif( !empty($this->fill_color) ) { if(is_array($this->fill_color)) { $img->PushColor($this->fill_color[$i % count($this->fill_color)]); } else { $img->PushColor($this->fill_color); } $img->FilledPolygon($pts); $img->PopColor(); } $val=$this->coords[0][$i]; if( !empty($val) && !is_numeric($val) ) { JpGraphError::RaiseL(2004,$i,$val); } if( $this->bar_shadow && $val != 0) { $ssh = $this->bar_shadow_hsize; $ssv = $this->bar_shadow_vsize; if( $val > 0 ) { $sp[0]=$pts[6]; $sp[1]=$pts[7]; $sp[2]=$pts[4]; $sp[3]=$pts[5]; $sp[4]=$pts[2]; $sp[5]=$pts[3]; $sp[6]=$pts[2]+$ssh; $sp[7]=$pts[3]-$ssv; $sp[8]=$pts[4]+$ssh; $sp[9]=$pts[5]-$ssv; $sp[10]=$pts[6]+$ssh; $sp[11]=$pts[7]-$ssv; } elseif( $val < 0 ) { $sp[0]=$pts[4]; $sp[1]=$pts[5]; $sp[2]=$pts[6]; $sp[3]=$pts[7]; $sp[4]=$pts[0]; $sp[5]=$pts[1]; $sp[6]=$pts[0]+$ssh; $sp[7]=$pts[1]-$ssv; $sp[8]=$pts[6]+$ssh; $sp[9]=$pts[7]-$ssv; $sp[10]=$pts[4]+$ssh; $sp[11]=$pts[5]-$ssv; } if( is_array($this->bar_shadow_color) ) { $numcolors = count($this->bar_shadow_color); if( $numcolors == 0 ) { JpGraphError::RaiseL(2005); } $img->PushColor($this->bar_shadow_color[$i % $numcolors]); } else { $img->PushColor($this->bar_shadow_color); } $img->FilledPolygon($sp); $img->PopColor(); } if( is_array($this->iPattern) ) { $f = new RectPatternFactory(); if( is_array($this->iPatternColor) ) { $pcolor = $this->iPatternColor[$i % $np]; } else $pcolor = $this->iPatternColor; $prect = $f->Create($this->iPattern[$i % $np],$pcolor,1); $prect->SetDensity($this->iPatternDensity[$i % $np]); if( $val < 0 ) { $rx = $pts[0]; $ry = $pts[1]; } else { $rx = $pts[2]; $ry = $pts[3]; } $width = abs($pts[4]-$pts[0])+1; $height = abs($pts[1]-$pts[3])+1; $prect->SetPos(new Rectangle($rx,$ry,$width,$height)); $prect->Stroke($img); } else { if( $this->iPattern > -1 ) { $f = new RectPatternFactory(); $prect = $f->Create($this->iPattern,$this->iPatternColor,1); $prect->SetDensity($this->iPatternDensity); if( $val < 0 ) { $rx = $pts[0]; $ry = $pts[1]; } else { $rx = $pts[2]; $ry = $pts[3]; } $width = abs($pts[4]-$pts[0])+1; $height = abs($pts[1]-$pts[3])+1; $prect->SetPos(new Rectangle($rx,$ry,$width,$height)); $prect->Stroke($img); } } if( is_array($this->color) ) $img->SetColor($this->color[$i % count($this->color)]); else $img->SetColor($this->color); $pts[] = $pts[0]; $pts[] = $pts[1]; if( $this->weight > 0 ) { $img->SetLineWeight($this->weight); $img->Polygon($pts); } $x=$pts[2]+($pts[4]-$pts[2])/2; if( $this->valuepos=='top' ) { $y=$pts[3]; if( $img->a === 90 ) { if( $val < 0 ) $this->value->SetAlign('right','center'); else $this->value->SetAlign('left','center'); } $this->value->Stroke($img,$val,$x,$y); } elseif( $this->valuepos=='max' ) { $y=$pts[3]; if( $img->a === 90 ) { if( $val < 0 ) $this->value->SetAlign('left','center'); else $this->value->SetAlign('right','center'); } else { $this->value->SetAlign('center','top'); } $this->value->SetMargin(-3); $this->value->Stroke($img,$val,$x,$y); } elseif( $this->valuepos=='center' ) { $y = ($pts[3] + $pts[1])/2; $this->value->SetAlign('center','center'); $this->value->SetMargin(0); $this->value->Stroke($img,$val,$x,$y); } elseif( $this->valuepos=='bottom' || $this->valuepos=='min' ) { $y=$pts[1]; if( $img->a === 90 ) { if( $val < 0 ) $this->value->SetAlign('right','center'); else $this->value->SetAlign('left','center'); } $this->value->SetMargin(3); $this->value->Stroke($img,$val,$x,$y); } else { JpGraphError::RaiseL(2006,$this->valuepos); } if( !empty($this->csimtargets[$i]) ) { $rpts = $img->ArrRotate($pts); $csimcoord=round($rpts[0]).", ".round($rpts[1]); for( $j=1; $j < 4; ++$j){ $csimcoord .= ", ".round($rpts[2*$j]).", ".round($rpts[2*$j+1]); } $this->csimareas .= '<area shape="poly" coords="'.$csimcoord.'" '; $this->csimareas .= " href=\"".htmlentities($this->csimtargets[$i])."\""; $sval=''; if( !empty($this->csimalts[$i]) ) { $sval=sprintf($this->csimalts[$i],$this->coords[0][$i]); $this->csimareas .= " title=\"$sval\" "; } $this->csimareas .= " alt=\"$sval\" />\n"; } } return true; } } class GroupBarPlot extends BarPlot { var $plots=array(), $nbrplots=0; var $numpoints; function GroupBarPlot($plots) { $this->width=0.5; $this->plots = $plots; $this->nbrplots = count($plots); if( $this->nbrplots < 1 ) { JpGraphError::RaiseL(2007); } for($i=0; $i < $this->nbrplots; ++$i ) { if( empty($this->plots[$i]) || !isset($this->plots[$i]) ) { JpGraphError::RaiseL(2008,$i); } } $this->numpoints = $plots[0]->numpoints; } function Legend(&$graph) { $n = count($this->plots); for($i=0; $i < $n; ++$i) { $c = get_class($this->plots[$i]); if( !is_a($this->plots[$i],'BarPlot') ) { JpGraphError::RaiseL(2009,$c); } $this->plots[$i]->DoLegend($graph); } } function Min() { list($xmin,$ymin) = $this->plots[0]->Min(); $n = count($this->plots); for($i=0; $i < $n; ++$i) { list($xm,$ym) = $this->plots[$i]->Min(); $xmin = max($xmin,$xm); $ymin = min($ymin,$ym); } return array($xmin,$ymin); } function Max() { list($xmax,$ymax) = $this->plots[0]->Max(); $n = count($this->plots); for($i=0; $i < $n; ++$i) { list($xm,$ym) = $this->plots[$i]->Max(); $xmax = max($xmax,$xm); $ymax = max($ymax,$ym); } return array($xmax,$ymax); } function GetCSIMareas() { $n = count($this->plots); $csimareas=''; for($i=0; $i < $n; ++$i) { $csimareas .= $this->plots[$i]->csimareas; } return $csimareas; } function Stroke(&$img,&$xscale,&$yscale) { $tmp=$xscale->off; $n = count($this->plots); $subwidth = $this->width/$this->nbrplots ; for( $i=0; $i < $n; ++$i ) { $this->plots[$i]->ymin=$this->ybase; $this->plots[$i]->SetWidth($subwidth); $xscale->off = $tmp+$i*round($xscale->scale_factor* $subwidth); $this->plots[$i]->Stroke($img,$xscale,$yscale); } $xscale->off=$tmp; } } class AccBarPlot extends BarPlot { var $plots=null,$nbrplots=0,$numpoints=0; function AccBarPlot($plots) { $this->plots = $plots; $this->nbrplots = count($plots); if( $this->nbrplots < 1 ) { JpGraphError::RaiseL(2010); } for($i=0; $i < $this->nbrplots; ++$i ) { if( empty($this->plots[$i]) || !isset($this->plots[$i]) ) { JpGraphError::RaiseL(2011,$i); } } $this->numpoints = $plots[0]->numpoints; $this->value = new DisplayValue(); } function Legend(&$graph) { $n = count($this->plots); for( $i=$n-1; $i >= 0; --$i ) { $c = get_class($this->plots[$i]); if( !is_a($this->plots[$i],'BarPlot') ) { JpGraphError::RaiseL(2012,$c); } $this->plots[$i]->DoLegend($graph); } } function Max() { list($xmax) = $this->plots[0]->Max(); $nmax=0; for($i=0; $i < count($this->plots); ++$i) { $n = count($this->plots[$i]->coords[0]); $nmax = max($nmax,$n); list($x) = $this->plots[$i]->Max(); $xmax = max($xmax,$x); } for( $i = 0; $i < $nmax; $i++ ) { $y=0; if( !isset($this->plots[0]->coords[0][$i]) ) { JpGraphError::RaiseL(2014); } if( $this->plots[0]->coords[0][$i] > 0 ) $y=$this->plots[0]->coords[0][$i]; for( $j = 1; $j < $this->nbrplots; $j++ ) { if( !isset($this->plots[$j]->coords[0][$i]) ) { JpGraphError::RaiseL(2014); } if( $this->plots[$j]->coords[0][$i] > 0 ) $y += $this->plots[$j]->coords[0][$i]; } $ymax[$i] = $y; } $ymax = max($ymax); if( $ymax <= $this->ybase ) $ymax = $this->ybase; return array($xmax,$ymax); } function Min() { $nmax=0; list($xmin,$ysetmin) = $this->plots[0]->Min(); for($i=0; $i < count($this->plots); ++$i) { $n = count($this->plots[$i]->coords[0]); $nmax = max($nmax,$n); list($x,$y) = $this->plots[$i]->Min(); $xmin = Min($xmin,$x); $ysetmin = Min($y,$ysetmin); } for( $i = 0; $i < $nmax; $i++ ) { $y=0; if( $this->plots[0]->coords[0][$i] < 0 ) $y=$this->plots[0]->coords[0][$i]; for( $j = 1; $j < $this->nbrplots; $j++ ) { if( $this->plots[$j]->coords[0][$i] < 0 ) $y += $this->plots[ $j ]->coords[0][$i]; } $ymin[$i] = $y; } $ymin = Min($ysetmin,Min($ymin)); if( $ymin >= $this->ybase ) $ymin = $this->ybase; return array($xmin,$ymin); } function Stroke(&$img,&$xscale,&$yscale) { $pattern=NULL; $img->SetLineWeight($this->weight); for($i=0; $i < $this->numpoints-1; $i++) { $accy = 0; $accy_neg = 0; for($j=0; $j < $this->nbrplots; ++$j ) { $img->SetColor($this->plots[$j]->color); if ( $this->plots[$j]->coords[0][$i] >= 0) { $yt=$yscale->Translate($this->plots[$j]->coords[0][$i]+$accy); $accyt=$yscale->Translate($accy); $accy+=$this->plots[$j]->coords[0][$i]; } else { $yt=$yscale->Translate($this->plots[$j]->coords[0][$i]+$accy_neg); $accyt=$yscale->Translate($accy_neg); $accy_neg+=$this->plots[$j]->coords[0][$i]; } $xt=$xscale->Translate($i); if( $this->abswidth > -1 ) $abswidth=$this->abswidth; else $abswidth=round($this->width*$xscale->scale_factor,0); $pts=array($xt,$accyt,$xt,$yt,$xt+$abswidth,$yt,$xt+$abswidth,$accyt); if( $this->bar_shadow ) { $ssh = $this->bar_shadow_hsize; $ssv = $this->bar_shadow_vsize; if( $j === 0 ) { $sp[0]=$pts[6]+1; $sp[1]=$pts[7]; $sp[2]=$pts[6]+$ssh; $sp[3]=$pts[7]-$ssv; $nsp[0]=$pts[0]; $nsp[1]=$pts[1]; $nsp[2]=$pts[0]+$ssh; $nsp[3]=$pts[1]-$ssv; $nsp[4]=$pts[6]+$ssh; $nsp[5]=$pts[7]-$ssv; $nsp[10]=$pts[6]+1; $nsp[11]=$pts[7]; } if( $j === $this->nbrplots-1 ) { if( is_array($this->bar_shadow_color) ) { $numcolors = count($this->bar_shadow_color); if( $numcolors == 0 ) { JpGraphError::RaiseL(2013); } $img->PushColor($this->bar_shadow_color[$i % $numcolors]); } else { $img->PushColor($this->bar_shadow_color); } if( $accy > 0 ) { $sp[4]=$pts[4]+$ssh; $sp[5]=$pts[5]-$ssv; $sp[6]=$pts[2]+$ssh; $sp[7]=$pts[3]-$ssv; $sp[8]=$pts[2]; $sp[9]=$pts[3]-1; $sp[10]=$pts[4]+1; $sp[11]=$pts[5]; $img->FilledPolygon($sp,4); } elseif( $accy_neg < 0 ) { $nsp[6]=$pts[4]+$ssh; $nsp[7]=$pts[5]-$ssv; $nsp[8]=$pts[4]+1; $nsp[9]=$pts[5]; $img->FilledPolygon($nsp,4); } $img->PopColor(); } } if ($this->plots[$j]->coords[0][$i] == 0 ) continue; if( $this->plots[$j]->grad ) { $grad = new Gradient($img); $grad->FilledRectangle( $pts[2],$pts[3], $pts[6],$pts[7], $this->plots[$j]->grad_fromcolor, $this->plots[$j]->grad_tocolor, $this->plots[$j]->grad_style); } else { if (is_array($this->plots[$j]->fill_color) ) { $numcolors = count($this->plots[$j]->fill_color); $fillcolor = $this->plots[$j]->fill_color[$i % $numcolors]; if( $fillcolor !== false ) $img->SetColor($this->plots[$j]->fill_color[$i % $numcolors]); } else { $fillcolor = $this->plots[$j]->fill_color; if( $fillcolor !== false ) $img->SetColor($this->plots[$j]->fill_color); } if( $fillcolor !== false ) $img->FilledPolygon($pts); $img->SetColor($this->plots[$j]->color); } if( $this->plots[$j]->iPattern > -1 ) { if( $pattern===NULL ) $pattern = new RectPatternFactory(); $prect = $pattern->Create($this->plots[$j]->iPattern,$this->plots[$j]->iPatternColor,1); $prect->SetDensity($this->plots[$j]->iPatternDensity); if( $this->plots[$j]->coords[0][$i] < 0 ) { $rx = $pts[0]; $ry = $pts[1]; } else { $rx = $pts[2]; $ry = $pts[3]; } $width = abs($pts[4]-$pts[0])+1; $height = abs($pts[1]-$pts[3])+1; $prect->SetPos(new Rectangle($rx,$ry,$width,$height)); $prect->Stroke($img); } if( $i < count($this->plots[$j]->csimtargets) ) { $rpts = $img->ArrRotate($pts); $csimcoord=round($rpts[0]).", ".round($rpts[1]); for( $k=1; $k < 4; ++$k){ $csimcoord .= ", ".round($rpts[2*$k]).", ".round($rpts[2*$k+1]); } if( ! empty($this->plots[$j]->csimtargets[$i]) ) { $this->csimareas.= '<area shape="poly" coords="'.$csimcoord.'" '; $this->csimareas.= " href=\"".$this->plots[$j]->csimtargets[$i]."\""; $sval=''; if( !empty($this->plots[$j]->csimalts[$i]) ) { $sval=sprintf($this->plots[$j]->csimalts[$i],$this->plots[$j]->coords[0][$i]); $this->csimareas .= " title=\"$sval\" "; } $this->csimareas .= " alt=\"$sval\" />\n"; } } $pts[] = $pts[0]; $pts[] = $pts[1]; $img->SetLineWeight($this->plots[$j]->line_weight); $img->Polygon($pts); $img->SetLineWeight(1); } $x=$pts[2]+($pts[4]-$pts[2])/2; if($this->bar_shadow) $x += $ssh; if( $accy_neg < 0 ) { $y=$yscale->Translate($accy_neg); $this->value->Stroke($img,$accy_neg,$x,$y); } else { $y=$yscale->Translate($accy); $this->value->Stroke($img,$accy,$x,$y); } $accy = 0; $accy_neg = 0; for($j=0; $j < $this->nbrplots; ++$j ) { if( $this->plots[$j]->coords[0][$i] == 0 ) continue; if ($this->plots[$j]->coords[0][$i] > 0) { $yt=$yscale->Translate($this->plots[$j]->coords[0][$i]+$accy); $accyt=$yscale->Translate($accy); if( $this->plots[$j]->valuepos=='center' ) { $y = $accyt-($accyt-$yt)/2; } elseif( $this->plots[$j]->valuepos=='bottom' ) { $y = $accyt; } else { $y = $accyt-($accyt-$yt); } $accy+=$this->plots[$j]->coords[0][$i]; if( $this->plots[$j]->valuepos=='center' ) { $this->plots[$j]->value->SetAlign("center","center"); $this->plots[$j]->value->SetMargin(0); } elseif( $this->plots[$j]->valuepos=='bottom' ) { $this->plots[$j]->value->SetAlign('center','bottom'); $this->plots[$j]->value->SetMargin(2); } else { $this->plots[$j]->value->SetAlign('center','top'); $this->plots[$j]->value->SetMargin(1); } } else { $yt=$yscale->Translate($this->plots[$j]->coords[0][$i]+$accy_neg); $accyt=$yscale->Translate($accy_neg); $accy_neg+=$this->plots[$j]->coords[0][$i]; if( $this->plots[$j]->valuepos=='center' ) { $y = $accyt-($accyt-$yt)/2; } elseif( $this->plots[$j]->valuepos=='bottom' ) { $y = $accyt; } else { $y = $accyt-($accyt-$yt); } if( $this->plots[$j]->valuepos=='center' ) { $this->plots[$j]->value->SetAlign("center","center"); $this->plots[$j]->value->SetMargin(0); } elseif( $this->plots[$j]->valuepos=='bottom' ) { $this->plots[$j]->value->SetAlign('center',$j==0 ? 'bottom':'top'); $this->plots[$j]->value->SetMargin(-2); } else { $this->plots[$j]->value->SetAlign('center','bottom'); $this->plots[$j]->value->SetMargin(-1); } } $this->plots[$j]->value->Stroke($img,$this->plots[$j]->coords[0][$i],$x,$y); } } return true; } } ?>
