<?php
 class FuncGenerator { var $iFunc='',$iXFunc='',$iMin,$iMax,$iStepSize; function FuncGenerator($aFunc,$aXFunc='') { $this->iFunc = $aFunc; $this->iXFunc = $aXFunc; } function E($aXMin,$aXMax,$aSteps=50) { $this->iMin = $aXMin; $this->iMax = $aXMax; $this->iStepSize = ($aXMax-$aXMin)/$aSteps; if( $this->iXFunc != '' ) $t = 'for($i='.$aXMin.'; $i<='.$aXMax.'; $i += '.$this->iStepSize.') {$ya[]='.$this->iFunc.';$xa[]='.$this->iXFunc.';}'; elseif( $this->iFunc != '' ) $t = 'for($x='.$aXMin.'; $x<='.$aXMax.'; $x += '.$this->iStepSize.') {$ya[]='.$this->iFunc.';$xa[]=$x;} $x='.$aXMax.';$ya[]='.$this->iFunc.';$xa[]=$x;'; else JpGraphError::RaiseL(24001); @eval($t); if( empty($xa) || empty($ya) ) JpGraphError::RaiseL(24002); return array($xa,$ya); } } class SymChar { function Get($aSymb,$aCapital=FALSE) { static $iSymbols = array( array('alpha','03B1','0391'), array('beta','03B2','0392'), array('gamma','03B3','0393'), array('delta','03B4','0394'), array('epsilon','03B5','0395'), array('zeta','03B6','0396'), array('ny','03B7','0397'), array('eta','03B8','0398'), array('theta','03B8','0398'), array('iota','03B9','0399'), array('kappa','03BA','039A'), array('lambda','03BB','039B'), array('mu','03BC','039C'), array('nu','03BD','039D'), array('xi','03BE','039E'), array('omicron','03BF','039F'), array('pi','03C0','03A0'), array('rho','03C1','03A1'), array('sigma','03C3','03A3'), array('tau','03C4','03A4'), array('upsilon','03C5','03A5'), array('phi','03C6','03A6'), array('chi','03C7','03A7'), array('psi','03C8','03A8'), array('omega','03C9','03A9'), array('euro','20AC'), array('yen','00A5'), array('pound','20A4'), array('approx','2248'), array('neq','2260'), array('not','2310'), array('def','2261'), array('inf','221E'), array('sqrt','221A'), array('int','222B'), array('copy','00A9'), array('para','00A7')); $n = count($iSymbols); $i=0; $found = false; $aSymb = strtolower($aSymb); while( $i < $n && !$found ) { $found = $aSymb === $iSymbols[$i++][0]; } if( $found ) { $ca = $iSymbols[--$i]; if( $aCapital && count($ca)==3 ) $s = $ca[2]; else $s = $ca[1]; return sprintf('&#%04d;',hexdec($s)); } else return ''; } } DEFINE('DSUTILS_MONTH',1); DEFINE('DSUTILS_MONTH1',1); DEFINE('DSUTILS_MONTH2',2); DEFINE('DSUTILS_MONTH3',3); DEFINE('DSUTILS_MONTH6',4); DEFINE('DSUTILS_WEEK1',5); DEFINE('DSUTILS_WEEK2',6); DEFINE('DSUTILS_WEEK4',7); DEFINE('DSUTILS_DAY1',8); DEFINE('DSUTILS_DAY2',9); DEFINE('DSUTILS_DAY4',10); DEFINE('DSUTILS_YEAR1',11); DEFINE('DSUTILS_YEAR2',12); DEFINE('DSUTILS_YEAR5',13); class DateScaleUtils { var $starthour,$startmonth, $startday, $startyear; var $endmonth, $endyear, $endday; var $tickPositions=array(),$minTickPositions=array(); var $iUseWeeks = true; function UseWeekFormat($aFlg) { $this->iUseWeeks = $aFlg; } function doYearly($aType,$aMinor=false) { $i=0; $j=0; $m = $this->startmonth; $y = $this->startyear; if( $this->startday == 1 ) { $this->tickPositions[$i++] = mktime(0,0,0,$m,1,$y); } ++$m; switch( $aType ) { case DSUTILS_YEAR1: for($y=$this->startyear; $y <= $this->endyear; ++$y ) { if( $aMinor ) { while( $m <= 12 ) { if( !($y == $this->endyear && $m > $this->endmonth) ) { $this->minTickPositions[$j++] = mktime(0,0,0,$m,1,$y); } ++$m; } $m=1; } $this->tickPositions[$i++] = mktime(0,0,0,1,1,$y); } break; case DSUTILS_YEAR2: $y=$this->startyear; while( $y <= $this->endyear ) { $this->tickPositions[$i++] = mktime(0,0,0,1,1,$y); for($k=0; $k < 1; ++$k ) { ++$y; if( $aMinor ) { $this->minTickPositions[$j++] = mktime(0,0,0,1,1,$y); } } ++$y; } break; case DSUTILS_YEAR5: $y=$this->startyear; while( $y <= $this->endyear ) { $this->tickPositions[$i++] = mktime(0,0,0,1,1,$y); for($k=0; $k < 4; ++$k ) { ++$y; if( $aMinor ) { $this->minTickPositions[$j++] = mktime(0,0,0,1,1,$y); } } ++$y; } break; } } function doDaily($aType,$aMinor=false) { $m = $this->startmonth; $y = $this->startyear; $d = $this->startday; $h = $this->starthour; $i=0;$j=0; if( $h == 0 ) { $this->tickPositions[$i++] = mktime(0,0,0,$m,$d,$y); $t = mktime(0,0,0,$m,$d,$y); } else { $t = mktime(0,0,0,$m,$d,$y); } switch($aType) { case DSUTILS_DAY1: while( $t <= $this->iMax ) { $t += 3600*24; $this->tickPositions[$i++] = $t; } break; case DSUTILS_DAY2: while( $t <= $this->iMax ) { $t += 3600*24; if( $aMinor ) { $this->minTickPositions[$j++] = $t; } $t += 3600*24; $this->tickPositions[$i++] = $t; } break; case DSUTILS_DAY4: while( $t <= $this->iMax ) { for($k=0; $k < 3; ++$k ) { $t += 3600*24; if( $aMinor ) { $this->minTickPositions[$j++] = $t; } } $t += 3600*24; $this->tickPositions[$i++] = $t; } break; } } function doWeekly($aType,$aMinor=false) { $hpd = 3600*24; $hpw = 3600*24*7; $thursday = $this->iMin + $hpd * (3 - (date('w', $this->iMin) + 6) % 7); $week = 1 + (date('z', $thursday) - (11 - date('w', mktime(0, 0, 0, 1, 1, date('Y', $thursday)))) % 7) / 7; $daynumber = date('w',$this->iMin); if( $daynumber == 0 ) $daynumber = 7; $m = $this->startmonth; $y = $this->startyear; $d = $this->startday; $i=0;$j=0; if( $daynumber == 1 ) { $this->tickPositions[$i++] = mktime(0,0,0,$m,$d,$y); $t = mktime(0,0,0,$m,$d,$y) + $hpw; } else { $t = mktime(0,0,0,$m,$d,$y) + $hpd*(8-$daynumber); } switch($aType) { case DSUTILS_WEEK1: $cnt=0; break; case DSUTILS_WEEK2: $cnt=1; break; case DSUTILS_WEEK4: $cnt=3; break; } while( $t <= $this->iMax ) { $this->tickPositions[$i++] = $t; for($k=0; $k < $cnt; ++$k ) { $t += $hpw; if( $aMinor ) { $this->minTickPositions[$j++] = $t; } } $t += $hpw; } } function doMonthly($aType,$aMinor=false) { $monthcount=0; $m = $this->startmonth; $y = $this->startyear; $i=0; $j=0; if( $this->startday == 1 ) { $this->tickPositions[$i++] = mktime(0,0,0,$m,1,$y); $monthcount=1; } if( $aType == 1 ) { if( $this->startday < 15 ) { $this->minTickPositions[$j++] = mktime(0,0,0,$m,15,$y); } } ++$m; for($y=$this->startyear; $y <= $this->endyear; ++$y ) { $stopmonth = $y == $this->endyear ? $this->endmonth : 12; while( $m <= $stopmonth ) { switch( $aType ) { case DSUTILS_MONTH1: if( $aMinor ) { if( $m <= $stopmonth ) { if( !($y==$this->endyear && $m==$stopmonth && $this->endday < 15) ) $this->minTickPositions[$j++] = mktime(0,0,0,$m,15,$y); } } $this->tickPositions[$i++] = mktime(0,0,0,$m,1,$y); break; case DSUTILS_MONTH2: if( $aMinor ) { $this->minTickPositions[$j++] = mktime(0,0,0,$m,1,$y); } if( $monthcount % 2 == 0 ) { $this->tickPositions[$i++] = mktime(0,0,0,$m,1,$y); } break; case DSUTILS_MONTH3: if( $aMinor ) { $this->minTickPositions[$j++] = mktime(0,0,0,$m,1,$y); } if( $monthcount % 3 == 0 ) { $this->tickPositions[$i++] = mktime(0,0,0,$m,1,$y); } break; case DSUTILS_MONTH6: if( $aMinor ) { $this->minTickPositions[$j++] = mktime(0,0,0,$m,1,$y); } if( $monthcount % 6 == 0 ) { $this->tickPositions[$i++] = mktime(0,0,0,$m,1,$y); } break; } ++$m; ++$monthcount; } $m=1; } if($this->startmonth == $this->endmonth && $this->startyear == $this->endyear && $aType==1 ) { $this->tickPositions[$i++] = mktime(0 ,0 ,0, $this->startmonth + 1, 1, $this->startyear); } return array($this->tickPositions,$this->minTickPositions); } function GetTicks($aData,$aType=1,$aMinor=false,$aEndPoints=false) { $n = count($aData); return $this->GetTicksFromMinMax($aData[0],$aData[$n-1],$aType,$aMinor,$aEndPoints); } function GetAutoTicks($aMin,$aMax,$aMaxTicks=10,$aMinor=false) { $diff = $aMax - $aMin; $spd = 3600*24; $spw = $spd*7; $spm = $spd*30; $spy = $spd*352; if( $this->iUseWeeks ) $w = 'W'; else $w = 'd M'; $tt = array( array($spw, array(1,DSUTILS_DAY1,'d M',2,DSUTILS_DAY2,'d M',-1,DSUTILS_DAY4,'d M')), array($spm, array(1,DSUTILS_DAY1,'d M',2,DSUTILS_DAY2,'d M',4,DSUTILS_DAY4,'d M', 7,DSUTILS_WEEK1,$w,-1,DSUTILS_WEEK2,$w)), array($spy, array(1,DSUTILS_DAY1,'d M',2,DSUTILS_DAY2,'d M',4,DSUTILS_DAY4,'d M', 7,DSUTILS_WEEK1,$w,14,DSUTILS_WEEK2,$w, 30,DSUTILS_MONTH1,'M',60,DSUTILS_MONTH2,'M',-1,DSUTILS_MONTH3,'M')), array(-1, array(30,DSUTILS_MONTH1,'M-Y',60,DSUTILS_MONTH2,'M-Y',90,DSUTILS_MONTH3,'M-Y', 180,DSUTILS_MONTH6,'M-Y',352,DSUTILS_YEAR1,'Y',704,DSUTILS_YEAR2,'Y',-1,DSUTILS_YEAR5,'Y'))); $ntt = count($tt); $nd = floor($diff/$spd); for($i=0; $i < $ntt; ++$i ) { if( $diff <= $tt[$i][0] || $i==$ntt-1) { $t = $tt[$i][1]; $n = count($t)/3; for( $j=0; $j < $n; ++$j ) { if( $nd/$t[3*$j] <= $aMaxTicks || $j==$n-1) { $type = $t[3*$j+1]; $fs = $t[3*$j+2]; list($tickPositions,$minTickPositions) = $this->GetTicksFromMinMax($aMin,$aMax,$type,$aMinor); return array($fs,$tickPositions,$minTickPositions,$type); } } } } } function GetTicksFromMinMax($aMin,$aMax,$aType,$aMinor=false,$aEndPoints=false) { $this->starthour = date('G',$aMin); $this->startmonth = date('n',$aMin); $this->startday = date('j',$aMin); $this->startyear = date('Y',$aMin); $this->endmonth = date('n',$aMax); $this->endyear = date('Y',$aMax); $this->endday = date('j',$aMax); $this->iMin = $aMin; $this->iMax = $aMax; if( $aType <= DSUTILS_MONTH6 ) { $this->doMonthly($aType,$aMinor); } elseif( $aType <= DSUTILS_WEEK4 ) { $this->doWeekly($aType,$aMinor); } elseif( $aType <= DSUTILS_DAY4 ) { $this->doDaily($aType,$aMinor); } elseif( $aType <= DSUTILS_YEAR5 ) { $this->doYearly($aType,$aMinor); } else { JpGraphError::RaiseL(24003); } if( $aEndPoints ) { $tickPositions[$i++] = $aData[0]; } if( $aEndPoints ) { $tickPositions[$i] = $aData[$n-1]; } return array($this->tickPositions,$this->minTickPositions); } } Class ReadFileData { function FromCSV($aFile,&$aData,$aSepChar=',',$aMaxLineLength=1024) { $rh = fopen($aFile,'r'); if( $rh === false ) return false; $tmp = array(); $lineofdata = fgetcsv($rh, 1000, ','); while ( $lineofdata !== FALSE) { $tmp = array_merge($tmp,$lineofdata); $lineofdata = fgetcsv($rh, $aMaxLineLength, $aSepChar); } fclose($rh); $n = count($tmp); $aData = array(); $cnt=0; for($i=0; $i < $n; ++$i) { if( $tmp[$i] !== "" ) { $aData[$cnt++] = floatval($tmp[$i]); } } return $cnt; } } ?>